{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as config, h, d as Host, g as getElement, c as createEvent, f as printIonWarning } from './index-4DxY6_gG.js';\nimport { g as getElementRoot, r as raf, f as addEventListener, m as removeEventListener, t as transitionEndAsync } from './helpers-8KSQQGQy.js';\nimport { l as chevronDown } from './index-DV3sJJW8.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\nconst Accordion = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* AccordionState.Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `\"end\"`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const {\n        headerEl\n      } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      if (slot.assignedElements === undefined) return;\n      return slot.assignedElements().find(el => el.tagName === 'ION-ITEM');\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const {\n        toggleIconSlot,\n        toggleIcon\n      } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      const {\n        contentEl,\n        contentElWrapper\n      } = this;\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        this.state = 4 /* AccordionState.Expanded */;\n        return;\n      }\n      if (this.state === 4 /* AccordionState.Expanded */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* AccordionState.Expanding */;\n          this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            this.state = 4 /* AccordionState.Expanded */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      } else {\n        this.state = 4 /* AccordionState.Expanded */;\n      }\n    };\n    this.collapseAccordion = (initialUpdate = false) => {\n      const {\n        contentEl\n      } = this;\n      if (initialUpdate || contentEl === undefined) {\n        this.state = 1 /* AccordionState.Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* AccordionState.Collapsed */) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            this.state = 2 /* AccordionState.Collapsing */;\n            await waitForTransition;\n            this.state = 1 /* AccordionState.Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      } else {\n        this.state = 1 /* AccordionState.Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = async (initialUpdate = false) => {\n      const accordionGroup = this.accordionGroupEl;\n      const accordionValue = this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        this.expandAccordion(initialUpdate);\n        this.isNext = this.isPrevious = false;\n      } else {\n        this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  valueChanged() {\n    this.updateState();\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const {\n      accordionGroupEl,\n      disabled,\n      readonly,\n      value,\n      state\n    } = this;\n    if (disabled || readonly) return;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const {\n      disabled,\n      readonly\n    } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return h(Host, {\n      key: '073e1d02c18dcbc20c68648426e87c14750c031d',\n      class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,\n        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,\n        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,\n        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': this.shouldAnimate()\n      }\n    }, h(\"div\", {\n      key: '9b4cf326de8bb6b4033992903c0c1bfd7eea9bcc',\n      onClick: () => this.toggleExpanded(),\n      id: \"header\",\n      part: headerPart,\n      \"aria-controls\": \"content\",\n      ref: headerEl => this.headerEl = headerEl\n    }, h(\"slot\", {\n      key: '464c32a37f64655eacf4218284214f5f30b14a1e',\n      name: \"header\"\n    })), h(\"div\", {\n      key: '8bb52e6a62d7de0106b253201a89a32e79d9a594',\n      id: \"content\",\n      part: contentPart,\n      role: \"region\",\n      \"aria-labelledby\": \"header\",\n      ref: contentEl => this.contentEl = contentEl\n    }, h(\"div\", {\n      key: '1d9dfd952ad493754aaeea7a8f625b33c2dd90a0',\n      id: \"content-wrapper\",\n      ref: contentElWrapper => this.contentElWrapper = contentElWrapper\n    }, h(\"slot\", {\n      key: '970dfbc55a612d739d0ca3b7b1a08e5c96d0c479',\n      name: \"content\"\n    }))));\n  }\n  static get delegatesFocus() {\n    return true;\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"]\n    };\n  }\n};\nlet accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-end-end-radius:6px;border-end-start-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-start-start-radius:6px;border-start-end-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nconst AccordionGroup = /*#__PURE__*/(() => {\n  let AccordionGroup = class {\n    constructor(hostRef) {\n      registerInstance(this, hostRef);\n      this.ionChange = createEvent(this, \"ionChange\", 7);\n      this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n      /**\n       * If `true`, all accordions inside of the\n       * accordion group will animate when expanding\n       * or collapsing.\n       */\n      this.animated = true;\n      /**\n       * If `true`, the accordion group cannot be interacted with.\n       */\n      this.disabled = false;\n      /**\n       * If `true`, the accordion group cannot be interacted with,\n       * but does not alter the opacity.\n       */\n      this.readonly = false;\n      /**\n       * Describes the expansion behavior for each accordion.\n       * Possible values are `\"compact\"` and `\"inset\"`.\n       * Defaults to `\"compact\"`.\n       */\n      this.expand = 'compact';\n    }\n    valueChanged() {\n      const {\n        value,\n        multiple\n      } = this;\n      if (!multiple && Array.isArray(value)) {\n        /**\n         * We do some processing on the `value` array so\n         * that it looks more like an array when logged to\n         * the console.\n         * Example given ['a', 'b']\n         * Default toString() behavior: a,b\n         * Custom behavior: ['a', 'b']\n         */\n        printIonWarning(`[ion-accordion-group] - An array of values was passed, but multiple is \"false\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \"value\" property when multiple=\"false\".\n\n  Value Passed: [${value.map(v => `'${v}'`).join(', ')}]\n`, this.el);\n      }\n      /**\n       * Do not use `value` here as that will be\n       * not account for the adjustment we make above.\n       */\n      this.ionValueChange.emit({\n        value: this.value\n      });\n    }\n    async disabledChanged() {\n      const {\n        disabled\n      } = this;\n      const accordions = await this.getAccordions();\n      for (const accordion of accordions) {\n        accordion.disabled = disabled;\n      }\n    }\n    async readonlyChanged() {\n      const {\n        readonly\n      } = this;\n      const accordions = await this.getAccordions();\n      for (const accordion of accordions) {\n        accordion.readonly = readonly;\n      }\n    }\n    async onKeydown(ev) {\n      const activeElement = document.activeElement;\n      if (!activeElement) {\n        return;\n      }\n      /**\n       * Make sure focus is in the header, not the body, of the accordion. This ensures\n       * that if there are any interactable elements in the body, their keyboard\n       * interaction doesn't get stolen by the accordion. Example: using up/down keys\n       * in ion-textarea.\n       */\n      const activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n      if (!activeAccordionHeader) {\n        return;\n      }\n      const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n      if (!accordionEl) {\n        return;\n      }\n      const closestGroup = accordionEl.closest('ion-accordion-group');\n      if (closestGroup !== this.el) {\n        return;\n      }\n      // If the active accordion is not in the current array of accordions, do not do anything\n      const accordions = await this.getAccordions();\n      const startingIndex = accordions.findIndex(a => a === accordionEl);\n      if (startingIndex === -1) {\n        return;\n      }\n      let accordion;\n      if (ev.key === 'ArrowDown') {\n        accordion = this.findNextAccordion(accordions, startingIndex);\n      } else if (ev.key === 'ArrowUp') {\n        accordion = this.findPreviousAccordion(accordions, startingIndex);\n      } else if (ev.key === 'Home') {\n        accordion = accordions[0];\n      } else if (ev.key === 'End') {\n        accordion = accordions[accordions.length - 1];\n      }\n      if (accordion !== undefined && accordion !== activeElement) {\n        accordion.focus();\n      }\n    }\n    async componentDidLoad() {\n      if (this.disabled) {\n        this.disabledChanged();\n      }\n      if (this.readonly) {\n        this.readonlyChanged();\n      }\n      /**\n       * When binding values in frameworks such as Angular\n       * it is possible for the value to be set after the Web Component\n       * initializes but before the value watcher is set up in Stencil.\n       * As a result, the watcher callback may not be fired.\n       * We work around this by manually calling the watcher\n       * callback when the component has loaded and the watcher\n       * is configured.\n       */\n      this.valueChanged();\n    }\n    /**\n     * Sets the value property and emits ionChange.\n     * This should only be called when the user interacts\n     * with the accordion and not for any update\n     * to the value property. The exception is when\n     * the app sets the value of a single-select\n     * accordion group to an array.\n     */\n    setValue(accordionValue) {\n      const value = this.value = accordionValue;\n      this.ionChange.emit({\n        value\n      });\n    }\n    /**\n     * This method is used to ensure that the value\n     * of ion-accordion-group is being set in a valid\n     * way. This method should only be called in\n     * response to a user generated action.\n     * @internal\n     */\n    async requestAccordionToggle(accordionValue, accordionExpand) {\n      const {\n        multiple,\n        value,\n        readonly,\n        disabled\n      } = this;\n      if (readonly || disabled) {\n        return;\n      }\n      if (accordionExpand) {\n        /**\n         * If group accepts multiple values\n         * check to see if value is already in\n         * in values array. If not, add it\n         * to the array.\n         */\n        if (multiple) {\n          const groupValue = value !== null && value !== void 0 ? value : [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          const valueExists = processedValue.find(v => v === accordionValue);\n          if (valueExists === undefined && accordionValue !== undefined) {\n            this.setValue([...processedValue, accordionValue]);\n          }\n        } else {\n          this.setValue(accordionValue);\n        }\n      } else {\n        /**\n         * If collapsing accordion, either filter the value\n         * out of the values array or unset the value.\n         */\n        if (multiple) {\n          const groupValue = value !== null && value !== void 0 ? value : [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          this.setValue(processedValue.filter(v => v !== accordionValue));\n        } else {\n          this.setValue(undefined);\n        }\n      }\n    }\n    findNextAccordion(accordions, startingIndex) {\n      const nextAccordion = accordions[startingIndex + 1];\n      if (nextAccordion === undefined) {\n        return accordions[0];\n      }\n      return nextAccordion;\n    }\n    findPreviousAccordion(accordions, startingIndex) {\n      const prevAccordion = accordions[startingIndex - 1];\n      if (prevAccordion === undefined) {\n        return accordions[accordions.length - 1];\n      }\n      return prevAccordion;\n    }\n    /**\n     * @internal\n     */\n    async getAccordions() {\n      return Array.from(this.el.querySelectorAll(':scope > ion-accordion'));\n    }\n    render() {\n      const {\n        disabled,\n        readonly,\n        expand\n      } = this;\n      const mode = getIonMode(this);\n      return h(Host, {\n        key: 'd1a79a93179474fbba66fcf11a92f4871dacc975',\n        class: {\n          [mode]: true,\n          'accordion-group-disabled': disabled,\n          'accordion-group-readonly': readonly,\n          [`accordion-group-expand-${expand}`]: true\n        },\n        role: \"presentation\"\n      }, h(\"slot\", {\n        key: 'e6b8954b686d1fbb4fc92adb07fddc97a24b0a31'\n      }));\n    }\n    get el() {\n      return getElement(this);\n    }\n    static get watchers() {\n      return {\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"readonly\": [\"readonlyChanged\"]\n      };\n    }\n  };\n  AccordionGroup.style = {\n    ios: accordionGroupIosCss,\n    md: accordionGroupMdCss\n  };\n  return AccordionGroup;\n})();\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };"],"mappings":"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","names":["accordionIosCss","accordionMdCss","Accordion","hostRef","registerInstance","accordionIds","chevronDown","ionItem","headerEl","slot","el","expanded","button","getElementRoot","toggleIconSlot","toggleIcon","iconEl","initialUpdate","contentEl","contentElWrapper","raf","__async","contentHeight","waitForTransition","transitionEndAsync","config","accordionGroup","accordionValue","value","nextAccordion","nextAccordionValue","previousAccordion","previousAccordionValue","nextSibling","previousSibling","_a","accordionGroupEl","addEventListener","removeEventListener","disabled","readonly","state","expand","mode","getIonMode","headerPart","contentPart","h","Host","getElement","accordionGroupIosCss","accordionGroupMdCss","AccordionGroup","createEvent","multiple","printIonWarning","v","accordions","accordion","ev","activeElement","accordionEl","startingIndex","a","accordionExpand","groupValue","processedValue","prevAccordion"],"x_google_ignoreList":[0]}