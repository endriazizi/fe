{"version":3,"sources":["node_modules/@ionic/core/dist/esm/swipe-back-B2YfOHRM.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { e as clamp } from './helpers-8KSQQGQy.js';\nimport { i as isRTL } from './dir-C53feagD.js';\nimport { createGesture } from './index-CfgBF1SE.js';\nimport './index-4DxY6_gG.js';\nimport './gesture-controller-BTEOs1at.js';\nconst createSwipeBackGesture = (el, canStartHandler, onStartHandler, onMoveHandler, onEndHandler) => {\n  const win = el.ownerDocument.defaultView;\n  let rtl = isRTL(el);\n  /**\n   * Determine if a gesture is near the edge\n   * of the screen. If true, then the swipe\n   * to go back gesture should proceed.\n   */\n  const isAtEdge = detail => {\n    const threshold = 50;\n    const {\n      startX\n    } = detail;\n    if (rtl) {\n      return startX >= win.innerWidth - threshold;\n    }\n    return startX <= threshold;\n  };\n  const getDeltaX = detail => {\n    return rtl ? -detail.deltaX : detail.deltaX;\n  };\n  const getVelocityX = detail => {\n    return rtl ? -detail.velocityX : detail.velocityX;\n  };\n  const canStart = detail => {\n    /**\n     * The user's locale can change mid-session,\n     * so we need to check text direction at\n     * the beginning of every gesture.\n     */\n    rtl = isRTL(el);\n    return isAtEdge(detail) && canStartHandler();\n  };\n  const onMove = detail => {\n    // set the transition animation's progress\n    const delta = getDeltaX(detail);\n    const stepValue = delta / win.innerWidth;\n    onMoveHandler(stepValue);\n  };\n  const onEnd = detail => {\n    // the swipe back gesture has ended\n    const delta = getDeltaX(detail);\n    const width = win.innerWidth;\n    const stepValue = delta / width;\n    const velocity = getVelocityX(detail);\n    const z = width / 2.0;\n    const shouldComplete = velocity >= 0 && (velocity > 0.2 || delta > z);\n    const missing = shouldComplete ? 1 - stepValue : stepValue;\n    const missingDistance = missing * width;\n    let realDur = 0;\n    if (missingDistance > 5) {\n      const dur = missingDistance / Math.abs(velocity);\n      realDur = Math.min(dur, 540);\n    }\n    onEndHandler(shouldComplete, stepValue <= 0 ? 0.01 : clamp(0, stepValue, 0.9999), realDur);\n  };\n  return createGesture({\n    el,\n    gestureName: 'goback-swipe',\n    /**\n     * Swipe to go back should have priority over other horizontal swipe\n     * gestures. These gestures have a priority of 100 which is why 101 was chosen here.\n     */\n    gesturePriority: 101,\n    threshold: 10,\n    canStart,\n    onStart: onStartHandler,\n    onMove,\n    onEnd\n  });\n};\nexport { createSwipeBackGesture };"],"mappings":"uMAQA,IAAMA,EAAyB,CAACC,EAAIC,EAAiBC,EAAgBC,EAAeC,IAAiB,CACnG,IAAMC,EAAML,EAAG,cAAc,YACzBM,EAAMC,EAAMP,CAAE,EAMZQ,EAAWC,GAAU,CAEzB,GAAM,CACJ,OAAAC,CACF,EAAID,EACJ,OAAIH,EACKI,GAAUL,EAAI,WAAa,GAE7BK,GAAU,EACnB,EACMC,EAAYF,GACTH,EAAM,CAACG,EAAO,OAASA,EAAO,OAEjCG,EAAeH,GACZH,EAAM,CAACG,EAAO,UAAYA,EAAO,UAkC1C,OAAOI,EAAc,CACnB,GAAAb,EACA,YAAa,eAKb,gBAAiB,IACjB,UAAW,GACX,SAzCeS,IAMfH,EAAMC,EAAMP,CAAE,EACPQ,EAASC,CAAM,GAAKR,EAAgB,GAmC3C,QAASC,EACT,OAlCaO,GAAU,CAGvB,IAAMK,EADQH,EAAUF,CAAM,EACJJ,EAAI,WAC9BF,EAAcW,CAAS,CACzB,EA8BE,MA7BYL,GAAU,CAEtB,IAAMM,EAAQJ,EAAUF,CAAM,EACxBO,EAAQX,EAAI,WACZS,EAAYC,EAAQC,EACpBC,EAAWL,EAAaH,CAAM,EAC9BS,EAAIF,EAAQ,EACZG,EAAiBF,GAAY,IAAMA,EAAW,IAAOF,EAAQG,GAE7DE,GADUD,EAAiB,EAAIL,EAAYA,GACfE,EAC9BK,EAAU,EACd,GAAID,EAAkB,EAAG,CACvB,IAAME,EAAMF,EAAkB,KAAK,IAAIH,CAAQ,EAC/CI,EAAU,KAAK,IAAIC,EAAK,GAAG,CAC7B,CACAlB,EAAae,EAAgBL,GAAa,EAAI,IAAOS,EAAM,EAAGT,EAAW,KAAM,EAAGO,CAAO,CAC3F,CAcA,CAAC,CACH","names":["createSwipeBackGesture","el","canStartHandler","onStartHandler","onMoveHandler","onEndHandler","win","rtl","isRTL","isAtEdge","detail","startX","getDeltaX","getVelocityX","createGesture","stepValue","delta","width","velocity","z","shouldComplete","missingDistance","realDur","dur","clamp"],"x_google_ignoreList":[0]}