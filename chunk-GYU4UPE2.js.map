{"version":3,"sources":["node_modules/@ionic/core/dist/esm/haptic-DzAMWJuk.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getCapacitor } from './capacitor-CFERIeaU.js';\nvar ImpactStyle = /*#__PURE__*/function (ImpactStyle) {\n  /**\n   * A collision between large, heavy user interface elements\n   *\n   * @since 1.0.0\n   */\n  ImpactStyle[\"Heavy\"] = \"HEAVY\";\n  /**\n   * A collision between moderately sized user interface elements\n   *\n   * @since 1.0.0\n   */\n  ImpactStyle[\"Medium\"] = \"MEDIUM\";\n  /**\n   * A collision between small, light user interface elements\n   *\n   * @since 1.0.0\n   */\n  ImpactStyle[\"Light\"] = \"LIGHT\";\n  return ImpactStyle;\n}(ImpactStyle || {});\nvar NotificationType = /*#__PURE__*/function (NotificationType) {\n  /**\n   * A notification feedback type indicating that a task has completed successfully\n   *\n   * @since 1.0.0\n   */\n  NotificationType[\"Success\"] = \"SUCCESS\";\n  /**\n   * A notification feedback type indicating that a task has produced a warning\n   *\n   * @since 1.0.0\n   */\n  NotificationType[\"Warning\"] = \"WARNING\";\n  /**\n   * A notification feedback type indicating that a task has failed\n   *\n   * @since 1.0.0\n   */\n  NotificationType[\"Error\"] = \"ERROR\";\n  return NotificationType;\n}(NotificationType || {});\nconst HapticEngine = {\n  getEngine() {\n    const capacitor = getCapacitor();\n    if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable('Haptics')) {\n      // Capacitor\n      return capacitor.Plugins.Haptics;\n    }\n    return undefined;\n  },\n  available() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return false;\n    }\n    const capacitor = getCapacitor();\n    /**\n     * Developers can manually import the\n     * Haptics plugin in their app which will cause\n     * getEngine to return the Haptics engine. However,\n     * the Haptics engine will throw an error if\n     * used in a web browser that does not support\n     * the Vibrate API. This check avoids that error\n     * if the browser does not support the Vibrate API.\n     */\n    if ((capacitor === null || capacitor === void 0 ? void 0 : capacitor.getPlatform()) === 'web') {\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n    return true;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    engine.impact({\n      style: options.style\n    });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    engine.notification({\n      type: options.type\n    });\n  },\n  selection() {\n    this.impact({\n      style: ImpactStyle.Light\n    });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    engine.selectionStart();\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    engine.selectionChanged();\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    engine.selectionEnd();\n  }\n};\n/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\nconst hapticAvailable = () => {\n  return HapticEngine.available();\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: ImpactStyle.LIGHT }` (or `MEDIUM`/`HEAVY`)\n */\nconst hapticImpact = options => {\n  hapticAvailable() && HapticEngine.impact(options);\n};\nexport { ImpactStyle as I, hapticSelectionChanged as a, hapticSelectionStart as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };"],"mappings":"mCAIA,IAAIA,GAA2B,SAAUA,EAAa,CAMpD,OAAAA,EAAY,MAAW,QAMvBA,EAAY,OAAY,SAMxBA,EAAY,MAAW,QAChBA,CACT,GAAEA,GAAe,CAAC,CAAC,EAsBnB,IAAMC,EAAe,CACnB,WAAY,CACV,IAAMC,EAAYC,EAAa,EAC/B,GAA0DD,GAAU,kBAAkB,SAAS,EAE7F,OAAOA,EAAU,QAAQ,OAG7B,EACA,WAAY,CAEV,GAAI,CADW,KAAK,UAAU,EAE5B,MAAO,GAET,IAAMA,EAAYC,EAAa,EAU/B,OAA2DD,GAAU,YAAY,IAAO,MAE/E,OAAO,UAAc,KAAe,UAAU,UAAY,OAE5D,EACT,EACA,OAAOE,EAAS,CACd,IAAMC,EAAS,KAAK,UAAU,EACzBA,GAGLA,EAAO,OAAO,CACZ,MAAOD,EAAQ,KACjB,CAAC,CACH,EACA,aAAaA,EAAS,CACpB,IAAMC,EAAS,KAAK,UAAU,EACzBA,GAGLA,EAAO,aAAa,CAClB,KAAMD,EAAQ,IAChB,CAAC,CACH,EACA,WAAY,CACV,KAAK,OAAO,CACV,MAAOE,EAAY,KACrB,CAAC,CACH,EACA,gBAAiB,CACf,IAAMD,EAAS,KAAK,UAAU,EACzBA,GAGLA,EAAO,eAAe,CACxB,EACA,kBAAmB,CACjB,IAAMA,EAAS,KAAK,UAAU,EACzBA,GAGLA,EAAO,iBAAiB,CAC1B,EACA,cAAe,CACb,IAAMA,EAAS,KAAK,UAAU,EACzBA,GAGLA,EAAO,aAAa,CACtB,CACF,EAKME,EAAkB,IACfN,EAAa,UAAU,EAM1BO,EAAkB,IAAM,CAC5BD,EAAgB,GAAKN,EAAa,UAAU,CAC9C,EAIMQ,EAAuB,IAAM,CACjCF,EAAgB,GAAKN,EAAa,eAAe,CACnD,EAIMS,EAAyB,IAAM,CACnCH,EAAgB,GAAKN,EAAa,iBAAiB,CACrD,EAKMU,EAAqB,IAAM,CAC/BJ,EAAgB,GAAKN,EAAa,aAAa,CACjD,EAKMW,EAAeR,GAAW,CAC9BG,EAAgB,GAAKN,EAAa,OAAOG,CAAO,CAClD","names":["ImpactStyle","HapticEngine","capacitor","getCapacitor","options","engine","ImpactStyle","hapticAvailable","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact"],"x_google_ignoreList":[0]}