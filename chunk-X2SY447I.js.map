{
  "version": 3,
  "sources": ["src/app/pages/account/account.ts", "src/app/pages/account/account.html"],
  "sourcesContent": ["import { AfterViewInit, Component, inject } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { NgOptimizedImage } from \"@angular/common\";\r\nimport {\r\n  AlertController,\r\n  IonButtons,\r\n  IonContent,\r\n  IonHeader,\r\n  IonItem,\r\n  IonList,\r\n  IonMenuButton,\r\n  IonTitle,\r\n  IonToolbar,\r\n} from \"@ionic/angular/standalone\";\r\nimport { UserService } from \"../../providers/user.service\";\r\n\r\n@Component({\r\n  selector: \"page-account\",\r\n  templateUrl: \"account.html\",\r\n  styleUrls: [\"./account.scss\"],\r\n  imports: [\r\n    IonHeader,\r\n    IonToolbar,\r\n    IonButtons,\r\n    IonMenuButton,\r\n    IonTitle,\r\n    IonContent,\r\n    IonItem,\r\n    IonList,\r\n    NgOptimizedImage,\r\n  ],\r\n  providers: [AlertController],\r\n})\r\nexport class AccountPage implements AfterViewInit {\r\n  private alertCtrl = inject(AlertController);\r\n  private router = inject(Router);\r\n  private user = inject(UserService);\r\n\r\n  username: string;\r\n\r\n  ngAfterViewInit() {\r\n    this.getUsername();\r\n  }\r\n\r\n  updatePicture() {\r\n    console.log(\"Clicked to update picture\");\r\n  }\r\n\r\n  // Present an alert with the current username populated\r\n  // clicking OK will update the username and display it\r\n  // clicking Cancel will close the alert and do nothing\r\n  async changeUsername() {\r\n    const alert = await this.alertCtrl.create({\r\n      header: \"Change Username\",\r\n      buttons: [\r\n        \"Cancel\",\r\n        {\r\n          text: \"Ok\",\r\n          handler: (data: { username: string }) => {\r\n            this.user.setUsername(data.username);\r\n            this.getUsername();\r\n          },\r\n        },\r\n      ],\r\n      inputs: [\r\n        {\r\n          type: \"text\",\r\n          name: \"username\",\r\n          value: this.username,\r\n          placeholder: \"username\",\r\n        },\r\n      ],\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  getUsername() {\r\n    this.user.getUsername().then((username) => {\r\n      this.username = username;\r\n    });\r\n  }\r\n\r\n  changePassword() {\r\n    console.log(\"Clicked to change password\");\r\n  }\r\n\r\n  logout() {\r\n    this.user.logout();\r\n    this.router.navigateByUrl(\"/login\");\r\n  }\r\n\r\n  support() {\r\n    this.router.navigateByUrl(\"/support\");\r\n  }\r\n}\r\n", "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-menu-button></ion-menu-button>\r\n    </ion-buttons>\r\n    <ion-title>Account</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n  @if(username) {\r\n  <div class=\"ion-padding-top ion-text-center\">\r\n    <img\r\n      ngSrc=\"https://www.gravatar.com/avatar?d=mm&s=140\"\r\n      width=\"140\"\r\n      height=\"140\"\r\n      priority\r\n      alt=\"User avatar\"\r\n      class=\"user-avatar\"\r\n    />\r\n    <h2>{{username}}</h2>\r\n\r\n    <ion-list inset>\r\n      <ion-item (click)=\"updatePicture()\">Update Picture</ion-item>\r\n      <ion-item (click)=\"changeUsername()\">Change Username</ion-item>\r\n      <ion-item (click)=\"changePassword()\">Change Password</ion-item>\r\n      <ion-item (click)=\"support()\">Support</ion-item>\r\n      <ion-item (click)=\"logout()\">Logout</ion-item>\r\n    </ion-list>\r\n  </div>\r\n  }\r\n</ion-content>\r\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "updatePicture", "changeUsername", "changePassword", "support", "logout", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "username", "AccountPage", "constructor", "alertCtrl", "inject", "AlertController", "router", "Router", "user", "UserService", "ngAfterViewInit", "getUsername", "console", "log", "__async", "create", "header", "buttons", "text", "handler", "data", "setUsername", "inputs", "type", "name", "value", "placeholder", "present", "then", "navigateByUrl", "selectors", "features", "\u0275\u0275ProvidersFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275conditionalCreate", "AccountPage_Conditional_7_Template", "\u0275\u0275conditional", "IonHeader", "IonToolbar", "IonButtons", "IonMenuButton", "IonTitle", "IonContent", "IonItem", "IonList", "NgOptimizedImage", "styles", "_AccountPage"]
}
