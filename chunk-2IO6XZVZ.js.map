{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-segment-view.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, h, d as Host, g as getElement } from './index-4DxY6_gG.js';\nimport { i as isRTL } from './dir-C53feagD.js';\nconst segmentViewIosCss = \":host{display:-ms-flexbox;display:flex;height:100%;overflow-x:scroll;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:none;-ms-overflow-style:none}:host::-webkit-scrollbar{display:none}:host(.segment-view-disabled){-ms-touch-action:none;touch-action:none;overflow-x:hidden}:host(.segment-view-scroll-disabled){pointer-events:none}:host(.segment-view-disabled){opacity:0.3}\";\nconst segmentViewMdCss = \":host{display:-ms-flexbox;display:flex;height:100%;overflow-x:scroll;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:none;-ms-overflow-style:none}:host::-webkit-scrollbar{display:none}:host(.segment-view-disabled){-ms-touch-action:none;touch-action:none;overflow-x:hidden}:host(.segment-view-scroll-disabled){pointer-events:none}:host(.segment-view-disabled){opacity:0.3}\";\nconst SegmentView = /*#__PURE__*/(() => {\n  let SegmentView = class {\n    constructor(hostRef) {\n      registerInstance(this, hostRef);\n      this.ionSegmentViewScroll = createEvent(this, \"ionSegmentViewScroll\", 7);\n      this.scrollEndTimeout = null;\n      this.isTouching = false;\n      /**\n       * If `true`, the segment view cannot be interacted with.\n       */\n      this.disabled = false;\n    }\n    handleScroll(ev) {\n      var _a;\n      const {\n        scrollLeft,\n        scrollWidth,\n        clientWidth\n      } = ev.target;\n      const max = scrollWidth - clientWidth;\n      const scrollRatio = (isRTL(this.el) ? -1 : 1) * (scrollLeft / max);\n      this.ionSegmentViewScroll.emit({\n        scrollRatio,\n        isManualScroll: (_a = this.isManualScroll) !== null && _a !== void 0 ? _a : true\n      });\n      // Reset the timeout to check for scroll end\n      this.resetScrollEndTimeout();\n    }\n    /**\n     * Handle touch start event to know when the user is actively dragging the segment view.\n     */\n    handleScrollStart() {\n      if (this.scrollEndTimeout) {\n        clearTimeout(this.scrollEndTimeout);\n        this.scrollEndTimeout = null;\n      }\n      this.isTouching = true;\n    }\n    /**\n     * Handle touch end event to know when the user is no longer dragging the segment view.\n     */\n    handleTouchEnd() {\n      this.isTouching = false;\n    }\n    /**\n     * Reset the scroll end detection timer. This is called on every scroll event.\n     */\n    resetScrollEndTimeout() {\n      if (this.scrollEndTimeout) {\n        clearTimeout(this.scrollEndTimeout);\n        this.scrollEndTimeout = null;\n      }\n      this.scrollEndTimeout = setTimeout(() => {\n        this.checkForScrollEnd();\n      },\n      // Setting this to a lower value may result in inconsistencies in behavior\n      // across browsers (particularly Firefox).\n      // Ideally, all of this logic is removed once the scroll end event is\n      // supported on all browsers (https://caniuse.com/?search=scrollend)\n      100);\n    }\n    /**\n     * Check if the scroll has ended and the user is not actively touching.\n     * If the conditions are met (active content is enabled and no active touch),\n     * reset the scroll position and emit the scroll end event.\n     */\n    checkForScrollEnd() {\n      // Only emit scroll end event if the active content is not disabled and\n      // the user is not touching the segment view\n      if (!this.isTouching) {\n        this.isManualScroll = undefined;\n      }\n    }\n    /**\n     * @internal\n     *\n     * This method is used to programmatically set the displayed segment content\n     * in the segment view. Calling this method will update the `value` of the\n     * corresponding segment button.\n     *\n     * @param id: The id of the segment content to display.\n     * @param smoothScroll: Whether to animate the scroll transition.\n     */\n    async setContent(id, smoothScroll = true) {\n      const contents = this.getSegmentContents();\n      const index = contents.findIndex(content => content.id === id);\n      if (index === -1) return;\n      this.isManualScroll = false;\n      this.resetScrollEndTimeout();\n      const contentWidth = this.el.offsetWidth;\n      const offset = index * contentWidth;\n      this.el.scrollTo({\n        top: 0,\n        left: (isRTL(this.el) ? -1 : 1) * offset,\n        behavior: smoothScroll ? 'smooth' : 'instant'\n      });\n    }\n    getSegmentContents() {\n      return Array.from(this.el.querySelectorAll('ion-segment-content'));\n    }\n    render() {\n      const {\n        disabled,\n        isManualScroll\n      } = this;\n      return h(Host, {\n        key: 'e180b67bb3143a5f4611fb358c037be6fc782a8f',\n        class: {\n          'segment-view-disabled': disabled,\n          'segment-view-scroll-disabled': isManualScroll === false\n        }\n      }, h(\"slot\", {\n        key: '41c11d6a7406a10f5c64a2e73abfc072afd8fc73'\n      }));\n    }\n    get el() {\n      return getElement(this);\n    }\n  };\n  SegmentView.style = {\n    ios: segmentViewIosCss,\n    md: segmentViewMdCss\n  };\n  return SegmentView;\n})();\nexport { SegmentView as ion_segment_view };"],"mappings":"oJAKA,IAAMA,EAAoB,ybACpBC,EAAmB,ybACnBC,GAA4B,IAAM,CACtC,IAAIA,EAAc,KAAM,CACtB,YAAYC,EAAS,CACnBC,EAAiB,KAAMD,CAAO,EAC9B,KAAK,qBAAuBE,EAAY,KAAM,uBAAwB,CAAC,EACvE,KAAK,iBAAmB,KACxB,KAAK,WAAa,GAIlB,KAAK,SAAW,EAClB,CACA,aAAaC,EAAI,CACf,IAAIC,EACJ,GAAM,CACJ,WAAAC,EACA,YAAAC,EACA,YAAAC,CACF,EAAIJ,EAAG,OACDK,EAAMF,EAAcC,EACpBE,GAAeC,EAAM,KAAK,EAAE,EAAI,GAAK,IAAML,EAAaG,GAC9D,KAAK,qBAAqB,KAAK,CAC7B,YAAAC,EACA,gBAAiBL,EAAK,KAAK,kBAAoB,MAAQA,IAAO,OAASA,EAAK,EAC9E,CAAC,EAED,KAAK,sBAAsB,CAC7B,CAIA,mBAAoB,CACd,KAAK,mBACP,aAAa,KAAK,gBAAgB,EAClC,KAAK,iBAAmB,MAE1B,KAAK,WAAa,EACpB,CAIA,gBAAiB,CACf,KAAK,WAAa,EACpB,CAIA,uBAAwB,CAClB,KAAK,mBACP,aAAa,KAAK,gBAAgB,EAClC,KAAK,iBAAmB,MAE1B,KAAK,iBAAmB,WAAW,IAAM,CACvC,KAAK,kBAAkB,CACzB,EAKA,GAAG,CACL,CAMA,mBAAoB,CAGb,KAAK,aACR,KAAK,eAAiB,OAE1B,CAWM,WAAWO,EAAIC,EAAe,GAAM,QAAAC,EAAA,sBAExC,IAAMC,EADW,KAAK,mBAAmB,EAClB,UAAUC,GAAWA,EAAQ,KAAOJ,CAAE,EAC7D,GAAIG,IAAU,GAAI,OAClB,KAAK,eAAiB,GACtB,KAAK,sBAAsB,EAC3B,IAAME,EAAe,KAAK,GAAG,YACvBC,EAASH,EAAQE,EACvB,KAAK,GAAG,SAAS,CACf,IAAK,EACL,MAAON,EAAM,KAAK,EAAE,EAAI,GAAK,GAAKO,EAClC,SAAUL,EAAe,SAAW,SACtC,CAAC,CACH,GACA,oBAAqB,CACnB,OAAO,MAAM,KAAK,KAAK,GAAG,iBAAiB,qBAAqB,CAAC,CACnE,CACA,QAAS,CACP,GAAM,CACJ,SAAAM,EACA,eAAAC,CACF,EAAI,KACJ,OAAOC,EAAEC,EAAM,CACb,IAAK,2CACL,MAAO,CACL,wBAAyBH,EACzB,+BAAgCC,IAAmB,EACrD,CACF,EAAGC,EAAE,OAAQ,CACX,IAAK,0CACP,CAAC,CAAC,CACJ,CACA,IAAI,IAAK,CACP,OAAOE,EAAW,IAAI,CACxB,CACF,EACA,OAAAvB,EAAY,MAAQ,CAClB,IAAKF,EACL,GAAIC,CACN,EACOC,CACT,GAAG","names":["segmentViewIosCss","segmentViewMdCss","SegmentView","hostRef","registerInstance","createEvent","ev","_a","scrollLeft","scrollWidth","clientWidth","max","scrollRatio","isRTL","id","smoothScroll","__async","index","content","contentWidth","offset","disabled","isManualScroll","h","Host","getElement"],"x_google_ignoreList":[0]}