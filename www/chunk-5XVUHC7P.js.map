{"version":3,"sources":["node_modules/@ionic/core/dist/esm/keyboard-controller-BaaVITYt.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index-ZjP4CjeZ.js';\nimport { K as Keyboard, a as KeyboardResize } from './keyboard-CUw4ekVy.js';\n\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = resizeMode => {\n  /**\n   * If doc is undefined then we are\n   * in an SSR environment, so the keyboard\n   * adjustment does not apply.\n   * If the webview does not resize then there\n   * is no container to resize.\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\n   * The three remaining resize modes: Native, Ionic, and Body\n   * all cause `ion-app` to resize, so we can listen for changes\n   * on that. In the event `ion-app` is not available then\n   * we can fall back to `body`.\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = resizeMode => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nconst createKeyboardController = async keyboardChangeCallback => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  /**\n   * This lets us determine if the webview content\n   * has resized as a result of the keyboard.\n   */\n  let initialResizeContainerHeight;\n  const init = async () => {\n    const resizeOptions = await Keyboard.getResizeMode();\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n    keyboardWillShowHandler = () => {\n      /**\n       * We need to compute initialResizeContainerHeight right before\n       * the keyboard opens to guarantee the resize container is visible.\n       * The resize container may not be visible if we compute this\n       * as soon as the keyboard controller is created.\n       * We should only need to do this once to avoid additional clientHeight\n       * computations.\n       */\n      if (initialResizeContainerHeight === undefined) {\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n      }\n      keyboardVisible = true;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const fireChangeCallback = (state, resizeMode) => {\n    if (keyboardChangeCallback) {\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n    }\n  };\n  /**\n   * Code responding to keyboard lifecycles may need\n   * to show/hide content once the webview has\n   * resized as a result of the keyboard showing/hiding.\n   * createResizePromiseIfNeeded provides a way for code to wait for the\n   * resize event that was triggered as a result of the keyboard.\n   */\n  const createResizePromiseIfNeeded = resizeMode => {\n    if (\n    /**\n     * If we are in an SSR environment then there is\n     * no window to resize. Additionally, if there\n     * is no resize mode or the resize mode is \"None\"\n     * then initialResizeContainerHeight will be 0\n     */\n    initialResizeContainerHeight === 0 ||\n    /**\n     * If the keyboard is closed before the webview resizes initially\n     * then the webview will never resize.\n     */\n    initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n      return;\n    }\n    /**\n     * Get the resize container so we can\n     * attach the ResizeObserver below to\n     * the correct element.\n     */\n    const containerElement = getResizeContainer(resizeMode);\n    if (containerElement === null) {\n      return;\n    }\n    /**\n     * Some part of the web content should resize,\n     * and we need to listen for a resize.\n     */\n    return new Promise(resolve => {\n      const callback = () => {\n        /**\n         * As per the spec, the ResizeObserver\n         * will fire when observation starts if\n         * the observed element is rendered and does not\n         * have a size of 0 x 0. However, the watched element\n         * may or may not have resized by the time this first\n         * callback is fired. As a result, we need to check\n         * the dimensions of the element.\n         *\n         * https://www.w3.org/TR/resize-observer/#intro\n         */\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\n          /**\n           * The resize happened, so stop listening\n           * for resize on this element.\n           */\n          ro.disconnect();\n          resolve();\n        }\n      };\n      /**\n       * In Capacitor there can be delay between when the window\n       * resizes and when the container element resizes, so we cannot\n       * rely on a 'resize' event listener on the window.\n       * Instead, we need to determine when the container\n       * element resizes using a ResizeObserver.\n       */\n      const ro = new ResizeObserver(callback);\n      ro.observe(containerElement);\n    });\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  await init();\n  return {\n    init,\n    destroy,\n    isKeyboardVisible\n  };\n};\nexport { createKeyboardController as c };"],"mappings":"iIAWA,IAAMA,EAAqBC,GAAc,CAQvC,GAAIC,IAAQ,QAAaD,IAAeE,EAAe,MAAQF,IAAe,OAC5E,OAAO,KAQT,IAAMG,EAASF,EAAI,cAAc,SAAS,EAC1C,OAAOE,GAAgDF,EAAI,IAC7D,EAMMG,EAA2BJ,GAAc,CAC7C,IAAMK,EAAmBN,EAAmBC,CAAU,EACtD,OAAOK,IAAqB,KAAO,EAAIA,EAAiB,YAC1D,EAOMC,EAAiCC,GAA0BC,EAAA,sBAC/D,IAAIC,EACAC,EACAC,EAKAC,EACEC,EAAO,IAAYL,EAAA,sBACvB,IAAMM,EAAgB,MAAMC,EAAS,cAAc,EAC7Cf,EAAac,IAAkB,OAAY,OAAYA,EAAc,KAC3EL,EAA0B,IAAM,CAS1BG,IAAiC,SACnCA,EAA+BR,EAAyBJ,CAAU,GAEpEW,EAAkB,GAClBK,EAAmBL,EAAiBX,CAAU,CAChD,EACAU,EAA0B,IAAM,CAC9BC,EAAkB,GAClBK,EAAmBL,EAAiBX,CAAU,CAChD,EACAiB,IAAQ,MAAQA,IAAQ,QAAkBA,EAAI,iBAAiB,mBAAoBR,CAAuB,EAC1GQ,IAAQ,MAAQA,IAAQ,QAAkBA,EAAI,iBAAiB,mBAAoBP,CAAuB,CAC5G,GACMM,EAAqB,CAACE,EAAOlB,IAAe,CAC5CO,GACFA,EAAuBW,EAAOC,EAA4BnB,CAAU,CAAC,CAEzE,EAQMmB,EAA8BnB,GAAc,CAChD,GAOAY,IAAiC,GAKjCA,IAAiCR,EAAyBJ,CAAU,EAClE,OAOF,IAAMK,EAAmBN,EAAmBC,CAAU,EACtD,GAAIK,IAAqB,KAOzB,OAAO,IAAI,QAAQe,GAAW,CAC5B,IAAMC,EAAW,IAAM,CAYjBhB,EAAiB,eAAiBO,IAKpCU,EAAG,WAAW,EACdF,EAAQ,EAEZ,EAQME,EAAK,IAAI,eAAeD,CAAQ,EACtCC,EAAG,QAAQjB,CAAgB,CAC7B,CAAC,CACH,EACMkB,EAAU,IAAM,CACpBN,IAAQ,MAAQA,IAAQ,QAAkBA,EAAI,oBAAoB,mBAAoBR,CAAuB,EAC7GQ,IAAQ,MAAQA,IAAQ,QAAkBA,EAAI,oBAAoB,mBAAoBP,CAAuB,EAC7GD,EAA0BC,EAA0B,MACtD,EACMc,EAAoB,IAAMb,EAChC,aAAME,EAAK,EACJ,CACL,KAAAA,EACA,QAAAU,EACA,kBAAAC,CACF,CACF","names":["getResizeContainer","resizeMode","doc","KeyboardResize","ionApp","getResizeContainerHeight","containerElement","createKeyboardController","keyboardChangeCallback","__async","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","initialResizeContainerHeight","init","resizeOptions","Keyboard","fireChangeCallback","win","state","createResizePromiseIfNeeded","resolve","callback","ro","destroy","isKeyboardVisible"],"x_google_ignoreList":[0]}