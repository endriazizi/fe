{"version":3,"sources":["node_modules/@ionic/core/components/capacitor.js","node_modules/@ionic/core/components/keyboard2.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index9.js';\nconst getCapacitor = () => {\n  if (win !== undefined) {\n    return win.Capacitor;\n  }\n  return undefined;\n};\nexport { getCapacitor as g };","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getCapacitor } from './capacitor.js';\nvar ExceptionCode = /*#__PURE__*/function (ExceptionCode) {\n  /**\n   * API is not implemented.\n   *\n   * This usually means the API can't be used because it is not implemented for\n   * the current platform.\n   */\n  ExceptionCode[\"Unimplemented\"] = \"UNIMPLEMENTED\";\n  /**\n   * API is not available.\n   *\n   * This means the API can't be used right now because:\n   *   - it is currently missing a prerequisite, such as network connectivity\n   *   - it requires a particular platform or browser version\n   */\n  ExceptionCode[\"Unavailable\"] = \"UNAVAILABLE\";\n  return ExceptionCode;\n}(ExceptionCode || {});\nvar KeyboardResize = /*#__PURE__*/function (KeyboardResize) {\n  /**\n   * Only the `body` HTML element will be resized.\n   * Relative units are not affected, because the viewport does not change.\n   *\n   * @since 1.0.0\n   */\n  KeyboardResize[\"Body\"] = \"body\";\n  /**\n   * Only the `ion-app` HTML element will be resized.\n   * Use it only for Ionic Framework apps.\n   *\n   * @since 1.0.0\n   */\n  KeyboardResize[\"Ionic\"] = \"ionic\";\n  /**\n   * The whole native Web View will be resized when the keyboard shows/hides.\n   * This affects the `vh` relative unit.\n   *\n   * @since 1.0.0\n   */\n  KeyboardResize[\"Native\"] = \"native\";\n  /**\n   * Neither the app nor the Web View are resized.\n   *\n   * @since 1.0.0\n   */\n  KeyboardResize[\"None\"] = \"none\";\n  return KeyboardResize;\n}(KeyboardResize || {});\nconst Keyboard = {\n  getEngine() {\n    const capacitor = getCapacitor();\n    if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable('Keyboard')) {\n      return capacitor.Plugins.Keyboard;\n    }\n    return undefined;\n  },\n  getResizeMode() {\n    const engine = this.getEngine();\n    if (!(engine === null || engine === void 0 ? void 0 : engine.getResizeMode)) {\n      return Promise.resolve(undefined);\n    }\n    return engine.getResizeMode().catch(e => {\n      if (e.code === ExceptionCode.Unimplemented) {\n        // If the native implementation is not available\n        // we treat it the same as if the plugin is not available.\n        return undefined;\n      }\n      throw e;\n    });\n  }\n};\nexport { Keyboard as K, KeyboardResize as a };"],"mappings":"wCAIA,IAAMA,EAAe,IAAM,CACzB,GAAIC,IAAQ,OACV,OAAOA,EAAI,SAGf,ECLA,IAAIC,GAA6B,SAAUA,EAAe,CAOxD,OAAAA,EAAc,cAAmB,gBAQjCA,EAAc,YAAiB,cACxBA,CACT,GAAEA,GAAiB,CAAC,CAAC,EACjBC,GAA8B,SAAUA,EAAgB,CAO1D,OAAAA,EAAe,KAAU,OAOzBA,EAAe,MAAW,QAO1BA,EAAe,OAAY,SAM3BA,EAAe,KAAU,OAClBA,CACT,GAAEA,GAAkB,CAAC,CAAC,EAChBC,EAAW,CACf,WAAY,CACV,IAAMC,EAAYC,EAAa,EAC/B,GAA0DD,GAAU,kBAAkB,UAAU,EAC9F,OAAOA,EAAU,QAAQ,QAG7B,EACA,eAAgB,CACd,IAAME,EAAS,KAAK,UAAU,EAC9B,OAAsDA,GAAO,cAGtDA,EAAO,cAAc,EAAE,MAAMC,GAAK,CACvC,GAAIA,EAAE,OAASN,EAAc,cAK7B,MAAMM,CACR,CAAC,EATQ,QAAQ,QAAQ,MAAS,CAUpC,CACF","names":["getCapacitor","win","ExceptionCode","KeyboardResize","Keyboard","capacitor","getCapacitor","engine","e"],"x_google_ignoreList":[0,1]}