{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-input-password-toggle.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, f as printIonWarning, h, d as Host, g as getElement } from './index-4DxY6_gG.js';\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\nimport { x as eyeOff, y as eye } from './index-DV3sJJW8.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nconst iosInputPasswordToggleCss = \"\";\nconst mdInputPasswordToggleCss = \"\";\nconst InputPasswordToggle = /*#__PURE__*/(() => {\n  let InputPasswordToggle = class {\n    constructor(hostRef) {\n      registerInstance(this, hostRef);\n      /**\n       * @internal\n       */\n      this.type = 'password';\n      this.togglePasswordVisibility = () => {\n        const {\n          inputElRef\n        } = this;\n        if (!inputElRef) {\n          return;\n        }\n        inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n      };\n    }\n    /**\n     * Whenever the input type changes we need to re-run validation to ensure the password\n     * toggle is being used with the correct input type. If the application changes the type\n     * outside of this component we also need to re-render so the correct icon is shown.\n     */\n    onTypeChange(newValue) {\n      if (newValue !== 'text' && newValue !== 'password') {\n        printIonWarning(`[ion-input-password-toggle] - Only inputs of type \"text\" or \"password\" are supported. Input of type \"${newValue}\" is not compatible.`, this.el);\n        return;\n      }\n    }\n    connectedCallback() {\n      const {\n        el\n      } = this;\n      const inputElRef = this.inputElRef = el.closest('ion-input');\n      if (!inputElRef) {\n        printIonWarning('[ion-input-password-toggle] - No ancestor ion-input found. This component must be slotted inside of an ion-input.', el);\n        return;\n      }\n      /**\n       * Important: Set the type in connectedCallback because the default value\n       * of this.type may not always be accurate. Usually inputs have the \"password\" type\n       * but it is possible to have the input to initially have the \"text\" type. In that scenario\n       * the wrong icon will show briefly before switching to the correct icon. Setting the\n       * type here allows us to avoid that flicker.\n       */\n      this.type = inputElRef.type;\n    }\n    disconnectedCallback() {\n      this.inputElRef = null;\n    }\n    render() {\n      var _a, _b;\n      const {\n        color,\n        type\n      } = this;\n      const mode = getIonMode(this);\n      const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n      const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n      const isPasswordVisible = type === 'text';\n      return h(Host, {\n        key: '91bc55664d496fe457518bd112865dd7811d0c17',\n        class: createColorClasses(color, {\n          [mode]: true\n        })\n      }, h(\"ion-button\", {\n        key: 'f3e436422110c9cb4d5c0b83500255b24ab4cdef',\n        mode: mode,\n        color: color,\n        fill: \"clear\",\n        shape: \"round\",\n        \"aria-checked\": isPasswordVisible ? 'true' : 'false',\n        \"aria-label\": isPasswordVisible ? 'Hide password' : 'Show password',\n        role: \"switch\",\n        type: \"button\",\n        onPointerDown: ev => {\n          /**\n           * This prevents mobile browsers from\n           * blurring the input when the password toggle\n           * button is activated.\n           */\n          ev.preventDefault();\n        },\n        onClick: this.togglePasswordVisibility\n      }, h(\"ion-icon\", {\n        key: '5c8b121153f148f92aa7cba0447673a4f6f3ad1e',\n        slot: \"icon-only\",\n        \"aria-hidden\": \"true\",\n        icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon\n      })));\n    }\n    get el() {\n      return getElement(this);\n    }\n    static get watchers() {\n      return {\n        \"type\": [\"onTypeChange\"]\n      };\n    }\n  };\n  InputPasswordToggle.style = {\n    ios: iosInputPasswordToggleCss,\n    md: mdInputPasswordToggleCss\n  };\n  return InputPasswordToggle;\n})();\nexport { InputPasswordToggle as ion_input_password_toggle };"],"mappings":"+NAOA,IAAMA,EAA4B,GAC5BC,EAA2B,GAC3BC,GAAoC,IAAM,CAC9C,IAAIA,EAAsB,KAAM,CAC9B,YAAYC,EAAS,CACnBC,EAAiB,KAAMD,CAAO,EAI9B,KAAK,KAAO,WACZ,KAAK,yBAA2B,IAAM,CACpC,GAAM,CACJ,WAAAE,CACF,EAAI,KACCA,IAGLA,EAAW,KAAOA,EAAW,OAAS,OAAS,WAAa,OAC9D,CACF,CAMA,aAAaC,EAAU,CACrB,GAAIA,IAAa,QAAUA,IAAa,WAAY,CAClDC,EAAgB,wGAAwGD,CAAQ,uBAAwB,KAAK,EAAE,EAC/J,MACF,CACF,CACA,mBAAoB,CAClB,GAAM,CACJ,GAAAE,CACF,EAAI,KACEH,EAAa,KAAK,WAAaG,EAAG,QAAQ,WAAW,EAC3D,GAAI,CAACH,EAAY,CACfE,EAAgB,oHAAqHC,CAAE,EACvI,MACF,CAQA,KAAK,KAAOH,EAAW,IACzB,CACA,sBAAuB,CACrB,KAAK,WAAa,IACpB,CACA,QAAS,CACP,IAAII,EAAIC,EACR,GAAM,CACJ,MAAAC,EACA,KAAAC,CACF,EAAI,KACEC,EAAOC,EAAW,IAAI,EACtBC,GAAoBN,EAAK,KAAK,YAAc,MAAQA,IAAO,OAASA,EAAKO,EACzEC,GAAoBP,EAAK,KAAK,YAAc,MAAQA,IAAO,OAASA,EAAKQ,EACzEC,EAAoBP,IAAS,OACnC,OAAOQ,EAAEC,EAAM,CACb,IAAK,2CACL,MAAOC,EAAmBX,EAAO,CAC/B,CAACE,CAAI,EAAG,EACV,CAAC,CACH,EAAGO,EAAE,aAAc,CACjB,IAAK,2CACL,KAAMP,EACN,MAAOF,EACP,KAAM,QACN,MAAO,QACP,eAAgBQ,EAAoB,OAAS,QAC7C,aAAcA,EAAoB,gBAAkB,gBACpD,KAAM,SACN,KAAM,SACN,cAAeI,GAAM,CAMnBA,EAAG,eAAe,CACpB,EACA,QAAS,KAAK,wBAChB,EAAGH,EAAE,WAAY,CACf,IAAK,2CACL,KAAM,YACN,cAAe,OACf,KAAMD,EAAoBF,EAAmBF,CAC/C,CAAC,CAAC,CAAC,CACL,CACA,IAAI,IAAK,CACP,OAAOS,EAAW,IAAI,CACxB,CACA,WAAW,UAAW,CACpB,MAAO,CACL,KAAQ,CAAC,cAAc,CACzB,CACF,CACF,EACA,OAAAtB,EAAoB,MAAQ,CAC1B,IAAKF,EACL,GAAIC,CACN,EACOC,CACT,GAAG","names":["iosInputPasswordToggleCss","mdInputPasswordToggleCss","InputPasswordToggle","hostRef","registerInstance","inputElRef","newValue","printIonWarning","el","_a","_b","color","type","mode","getIonMode","showPasswordIcon","eye","hidePasswordIcon","eyeOff","isPasswordVisible","h","Host","createColorClasses","ev","getElement"],"x_google_ignoreList":[0]}