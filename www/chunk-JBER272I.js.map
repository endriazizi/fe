{"version":3,"sources":["node_modules/@ionic/core/dist/esm/gesture-controller-BTEOs1at.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nclass GestureController {\n  constructor() {\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n  createGesture(config) {\n    var _a;\n    return new GestureDelegate(this, this.newID(), config.name, (_a = config.priority) !== null && _a !== void 0 ? _a : 0, !!config.disableScroll);\n  }\n  /**\n   * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n   */\n  createBlocker(opts = {}) {\n    return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n  }\n  start(gestureName, id, priority) {\n    if (!this.canStart(gestureName)) {\n      this.requestedStart.delete(id);\n      return false;\n    }\n    this.requestedStart.set(id, priority);\n    return true;\n  }\n  capture(gestureName, id, priority) {\n    if (!this.start(gestureName, id, priority)) {\n      return false;\n    }\n    const requestedStart = this.requestedStart;\n    let maxPriority = -1e4;\n    requestedStart.forEach(value => {\n      maxPriority = Math.max(maxPriority, value);\n    });\n    if (maxPriority === priority) {\n      this.capturedId = id;\n      requestedStart.clear();\n      const event = new CustomEvent('ionGestureCaptured', {\n        detail: {\n          gestureName\n        }\n      });\n      document.dispatchEvent(event);\n      return true;\n    }\n    requestedStart.delete(id);\n    return false;\n  }\n  release(id) {\n    this.requestedStart.delete(id);\n    if (this.capturedId === id) {\n      this.capturedId = undefined;\n    }\n  }\n  disableGesture(gestureName, id) {\n    let set = this.disabledGestures.get(gestureName);\n    if (set === undefined) {\n      set = new Set();\n      this.disabledGestures.set(gestureName, set);\n    }\n    set.add(id);\n  }\n  enableGesture(gestureName, id) {\n    const set = this.disabledGestures.get(gestureName);\n    if (set !== undefined) {\n      set.delete(id);\n    }\n  }\n  disableScroll(id) {\n    this.disabledScroll.add(id);\n    if (this.disabledScroll.size === 1) {\n      document.body.classList.add(BACKDROP_NO_SCROLL);\n    }\n  }\n  enableScroll(id) {\n    this.disabledScroll.delete(id);\n    if (this.disabledScroll.size === 0) {\n      document.body.classList.remove(BACKDROP_NO_SCROLL);\n    }\n  }\n  canStart(gestureName) {\n    if (this.capturedId !== undefined) {\n      // a gesture already captured\n      return false;\n    }\n    if (this.isDisabled(gestureName)) {\n      return false;\n    }\n    return true;\n  }\n  isCaptured() {\n    return this.capturedId !== undefined;\n  }\n  isScrollDisabled() {\n    return this.disabledScroll.size > 0;\n  }\n  isDisabled(gestureName) {\n    const disabled = this.disabledGestures.get(gestureName);\n    if (disabled && disabled.size > 0) {\n      return true;\n    }\n    return false;\n  }\n  newID() {\n    this.gestureId++;\n    return this.gestureId;\n  }\n}\nclass GestureDelegate {\n  constructor(ctrl, id, name, priority, disableScroll) {\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n  canStart() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.canStart(this.name);\n  }\n  start() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.start(this.name, this.id, this.priority);\n  }\n  capture() {\n    if (!this.ctrl) {\n      return false;\n    }\n    const captured = this.ctrl.capture(this.name, this.id, this.priority);\n    if (captured && this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n    return captured;\n  }\n  release() {\n    if (this.ctrl) {\n      this.ctrl.release(this.id);\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }\n  destroy() {\n    this.release();\n    this.ctrl = undefined;\n  }\n}\nclass BlockerDelegate {\n  constructor(ctrl, id, disable, disableScroll) {\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n  block() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.disableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n  }\n  unblock() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.enableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.enableScroll(this.id);\n    }\n  }\n  destroy() {\n    this.unblock();\n    this.ctrl = undefined;\n  }\n}\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\nexport { BACKDROP_NO_SCROLL as B, GESTURE_CONTROLLER as G };"],"mappings":"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","names":["GestureController","config","_a","GestureDelegate","opts","BlockerDelegate","gestureName","id","priority","requestedStart","maxPriority","value","event","set","BACKDROP_NO_SCROLL","disabled","ctrl","name","disableScroll","captured","disable","gesture","GESTURE_CONTROLLER"],"x_google_ignoreList":[0]}