{"version":3,"sources":["node_modules/@ionic/core/dist/esm/button-active-DBUPuLNw.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as writeTask } from './index-4DxY6_gG.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionChanged, b as hapticSelectionStart } from './haptic-DzAMWJuk.js';\nimport { createGesture } from './index-CfgBF1SE.js';\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target) || target.disabled) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\nexport { createButtonActiveGesture as c };"],"mappings":"iIAMA,IAAMA,EAA4B,CAACC,EAAIC,IAAa,CAClD,IAAIC,EACAC,EACEC,EAAwB,CAACC,EAAGC,EAAGC,IAAqB,CACxD,GAAI,OAAO,SAAa,IACtB,OAEF,IAAMC,EAAS,SAAS,iBAAiBH,EAAGC,CAAC,EAC7C,GAAI,CAACE,GAAU,CAACP,EAASO,CAAM,GAAKA,EAAO,SAAU,CACnDC,EAAkB,EAClB,MACF,CACID,IAAWN,IACbO,EAAkB,EAClBC,EAAgBF,EAAQD,CAAgB,EAE5C,EACMG,EAAkB,CAACC,EAAQJ,IAAqB,CACpDL,EAAuBS,EAClBR,IACHA,EAAuBD,GAEzB,IAAMU,EAAiBV,EACvBW,EAAU,IAAMD,EAAe,UAAU,IAAI,eAAe,CAAC,EAC7DL,EAAiB,CACnB,EACME,EAAoB,CAACK,EAAgB,KAAU,CACnD,GAAI,CAACZ,EACH,OAEF,IAAMU,EAAiBV,EACvBW,EAAU,IAAMD,EAAe,UAAU,OAAO,eAAe,CAAC,EAS5DE,GAAiBX,IAAyBD,GAC5CA,EAAqB,MAAM,EAE7BA,EAAuB,MACzB,EACA,OAAOa,EAAc,CACnB,GAAAf,EACA,YAAa,mBACb,UAAW,EACX,QAASgB,GAAMZ,EAAsBY,EAAG,SAAUA,EAAG,SAAUC,CAAoB,EACnF,OAAQD,GAAMZ,EAAsBY,EAAG,SAAUA,EAAG,SAAUE,CAAsB,EACpF,MAAO,IAAM,CACXT,EAAkB,EAAI,EACtBU,EAAmB,EACnBhB,EAAuB,MACzB,CACF,CAAC,CACH","names":["createButtonActiveGesture","el","isButton","currentTouchedButton","initialTouchedButton","activateButtonAtPoint","x","y","hapticFeedbackFn","target","clearActiveButton","setActiveButton","button","buttonToModify","writeTask","dispatchClick","createGesture","ev","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd"],"x_google_ignoreList":[0]}