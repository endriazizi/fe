{"version":3,"sources":["node_modules/@ionic/core/dist/esm/hardware-back-button-Dhbd-23H.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index-ZjP4CjeZ.js';\nimport { e as config, j as printIonError } from './index-4DxY6_gG.js';\n\n/**\n * CloseWatcher is a newer API that lets\n * use detect the hardware back button event\n * in a web browser: https://caniuse.com/?search=closewatcher\n * However, not every browser supports it yet.\n *\n * This needs to be a function so that we can\n * check the config once it has been set.\n * Otherwise, this code would be evaluated the\n * moment this file is evaluated which could be\n * before the config is set.\n */\nconst shouldUseCloseWatcher = () => config.get('experimentalCloseWatcher', false) && win !== undefined && 'CloseWatcher' in win;\n/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\nconst blockHardwareBackButton = () => {\n  document.addEventListener('backbutton', () => {}); // eslint-disable-line\n};\nconst startHardwareBackButton = () => {\n  const doc = document;\n  let busy = false;\n  const backButtonCallback = () => {\n    if (busy) {\n      return;\n    }\n    let index = 0;\n    let handlers = [];\n    const ev = new CustomEvent('ionBackButton', {\n      bubbles: false,\n      detail: {\n        register(priority, handler) {\n          handlers.push({\n            priority,\n            handler,\n            id: index++\n          });\n        }\n      }\n    });\n    doc.dispatchEvent(ev);\n    const executeAction = async handlerRegister => {\n      try {\n        if (handlerRegister === null || handlerRegister === void 0 ? void 0 : handlerRegister.handler) {\n          const result = handlerRegister.handler(processHandlers);\n          if (result != null) {\n            await result;\n          }\n        }\n      } catch (e) {\n        printIonError('[ion-app] - Exception in startHardwareBackButton:', e);\n      }\n    };\n    const processHandlers = () => {\n      if (handlers.length > 0) {\n        let selectedHandler = {\n          priority: Number.MIN_SAFE_INTEGER,\n          handler: () => undefined,\n          id: -1\n        };\n        handlers.forEach(handler => {\n          if (handler.priority >= selectedHandler.priority) {\n            selectedHandler = handler;\n          }\n        });\n        busy = true;\n        handlers = handlers.filter(handler => handler.id !== selectedHandler.id);\n        executeAction(selectedHandler).then(() => busy = false);\n      }\n    };\n    processHandlers();\n  };\n  /**\n   * If the CloseWatcher is defined then\n   * we don't want to also listen for the native\n   * backbutton event otherwise we may get duplicate\n   * events firing.\n   */\n  if (shouldUseCloseWatcher()) {\n    let watcher;\n    const configureWatcher = () => {\n      watcher === null || watcher === void 0 ? void 0 : watcher.destroy();\n      watcher = new win.CloseWatcher();\n      /**\n       * Once a close request happens\n       * the watcher gets destroyed.\n       * As a result, we need to re-configure\n       * the watcher so we can respond to other\n       * close requests.\n       */\n      watcher.onclose = () => {\n        backButtonCallback();\n        configureWatcher();\n      };\n    };\n    configureWatcher();\n  } else {\n    doc.addEventListener('backbutton', backButtonCallback);\n  }\n};\nconst OVERLAY_BACK_BUTTON_PRIORITY = 100;\nconst MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, shouldUseCloseWatcher, startHardwareBackButton };"],"mappings":"+HAkBA,IAAMA,EAAwB,IAAMC,EAAO,IAAI,2BAA4B,EAAK,GAAKC,IAAQ,QAAa,iBAAkBA,EAWtHC,EAA0B,IAAM,CACpC,SAAS,iBAAiB,aAAc,IAAM,CAAC,CAAC,CAClD,EACMC,EAA0B,IAAM,CACpC,IAAMC,EAAM,SACRC,EAAO,GACLC,EAAqB,IAAM,CAC/B,GAAID,EACF,OAEF,IAAIE,EAAQ,EACRC,EAAW,CAAC,EACVC,EAAK,IAAI,YAAY,gBAAiB,CAC1C,QAAS,GACT,OAAQ,CACN,SAASC,EAAUC,EAAS,CAC1BH,EAAS,KAAK,CACZ,SAAAE,EACA,QAAAC,EACA,GAAIJ,GACN,CAAC,CACH,CACF,CACF,CAAC,EACDH,EAAI,cAAcK,CAAE,EACpB,IAAMG,EAAsBC,GAAmBC,EAAA,sBAC7C,GAAI,CACF,GAAsED,GAAgB,QAAS,CAC7F,IAAME,EAASF,EAAgB,QAAQG,CAAe,EAClDD,GAAU,OACZ,MAAMA,EAEV,CACF,OAAS,EAAG,CACVE,EAAc,oDAAqD,CAAC,CACtE,CACF,GACMD,EAAkB,IAAM,CAC5B,GAAIR,EAAS,OAAS,EAAG,CACvB,IAAIU,EAAkB,CACpB,SAAU,OAAO,iBACjB,QAAS,IAAG,GACZ,GAAI,EACN,EACAV,EAAS,QAAQG,GAAW,CACtBA,EAAQ,UAAYO,EAAgB,WACtCA,EAAkBP,EAEtB,CAAC,EACDN,EAAO,GACPG,EAAWA,EAAS,OAAOG,GAAWA,EAAQ,KAAOO,EAAgB,EAAE,EACvEN,EAAcM,CAAe,EAAE,KAAK,IAAMb,EAAO,EAAK,CACxD,CACF,EACAW,EAAgB,CAClB,EAOA,GAAIjB,EAAsB,EAAG,CAC3B,IAAIoB,EACEC,EAAmB,IAAM,CACqBD,GAAQ,QAAQ,EAClEA,EAAU,IAAIlB,EAAI,aAQlBkB,EAAQ,QAAU,IAAM,CACtBb,EAAmB,EACnBc,EAAiB,CACnB,CACF,EACAA,EAAiB,CACnB,MACEhB,EAAI,iBAAiB,aAAcE,CAAkB,CAEzD,EACMe,EAA+B,IAC/BC,EAA4B","names":["shouldUseCloseWatcher","config","win","blockHardwareBackButton","startHardwareBackButton","doc","busy","backButtonCallback","index","handlers","ev","priority","handler","executeAction","handlerRegister","__async","result","processHandlers","printIonError","selectedHandler","watcher","configureWatcher","OVERLAY_BACK_BUTTON_PRIORITY","MENU_BACK_BUTTON_PRIORITY"],"x_google_ignoreList":[0]}