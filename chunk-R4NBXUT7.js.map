{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, e as config, f as printIonWarning, h, g as getElement, d as Host } from './index-4DxY6_gG.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-hHmYLOfE.js';\nimport { s as shallowEqualStringMap, l as assert } from './helpers-8KSQQGQy.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-Dp7GXH1z.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nimport { a as attachComponent } from './framework-delegate-BLEBgH06.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n// TODO(FW-2832): types\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;z-index:0}\";\nconst Nav = /*#__PURE__*/(() => {\n  let Nav = class {\n    constructor(hostRef) {\n      registerInstance(this, hostRef);\n      this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n      this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n      this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n      this.transInstr = [];\n      this.gestureOrAnimationInProgress = false;\n      this.useRouter = false;\n      this.isTransitioning = false;\n      this.destroyed = false;\n      this.views = [];\n      this.didLoad = false;\n      /**\n       * If `true`, the nav should animate the transition of components.\n       */\n      this.animated = true;\n    }\n    swipeGestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(this.swipeGesture === true);\n      }\n    }\n    rootChanged() {\n      if (this.root === undefined) {\n        return;\n      }\n      if (this.didLoad === false) {\n        /**\n         * If the component has not loaded yet, we can skip setting up the root component.\n         * It will be called when `componentDidLoad` fires.\n         */\n        return;\n      }\n      if (!this.useRouter) {\n        if (this.root !== undefined) {\n          this.setRoot(this.root, this.rootParams);\n        }\n      }\n    }\n    componentWillLoad() {\n      this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n      if (this.swipeGesture === undefined) {\n        const mode = getIonMode(this);\n        this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n      }\n      this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n      // We want to set this flag before any watch callbacks are manually called\n      this.didLoad = true;\n      this.rootChanged();\n      this.gesture = (await import('./swipe-back-B2YfOHRM.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n      this.swipeGestureChanged();\n    }\n    connectedCallback() {\n      this.destroyed = false;\n    }\n    disconnectedCallback() {\n      for (const view of this.views) {\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n        view._destroy();\n      }\n      // Release swipe back gesture and transition.\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n      this.transInstr.length = 0;\n      this.views.length = 0;\n      this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n      return this.insert(-1, component, componentProps, opts, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n      return this.insertPages(insertIndex, [{\n        component,\n        componentProps\n      }], opts, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: insertComponents,\n        opts\n      }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n      return this.removeIndex(-1, 1, opts, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n      const ti = {\n        removeStart: -1,\n        removeCount: -1,\n        opts\n      };\n      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n        ti.removeView = indexOrViewCtrl;\n        ti.removeStart = 1;\n      } else if (typeof indexOrViewCtrl === 'number') {\n        ti.removeStart = indexOrViewCtrl + 1;\n      }\n      return this.queueTrns(ti, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n      return this.removeIndex(1, -1, opts, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n      return this.queueTrns({\n        removeStart: startIndex,\n        removeCount,\n        opts\n      }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n      return this.setPages([{\n        component,\n        componentProps\n      }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n      opts !== null && opts !== void 0 ? opts : opts = {};\n      // if animation wasn't set to true then default it to NOT animate\n      if (opts.animated !== true) {\n        opts.animated = false;\n      }\n      return this.queueTrns({\n        insertStart: 0,\n        insertViews: views,\n        removeStart: 0,\n        removeCount: -1,\n        opts\n      }, done);\n    }\n    /**\n     * Called by the router to update the view.\n     *\n     * @param id The component tag.\n     * @param params The component params.\n     * @param direction A direction hint.\n     * @param animation an AnimationBuilder.\n     *\n     * @return the status.\n     * @internal\n     */\n    setRouteId(id, params, direction, animation) {\n      const active = this.getActiveSync();\n      if (matches(active, id, params)) {\n        return Promise.resolve({\n          changed: false,\n          element: active.element\n        });\n      }\n      let resolve;\n      const promise = new Promise(r => resolve = r);\n      let finish;\n      const commonOpts = {\n        updateURL: false,\n        viewIsReady: enteringEl => {\n          let mark;\n          const p = new Promise(r => mark = r);\n          resolve({\n            changed: true,\n            element: enteringEl,\n            markVisible: async () => {\n              mark();\n              await finish;\n            }\n          });\n          return p;\n        }\n      };\n      if (direction === 'root') {\n        finish = this.setRoot(id, params, commonOpts);\n      } else {\n        // Look for a view matching the target in the view stack.\n        const viewController = this.views.find(v => matches(v, id, params));\n        if (viewController) {\n          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animationBuilder: animation\n          }));\n        } else if (direction === 'forward') {\n          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n            animationBuilder: animation\n          }));\n        } else if (direction === 'back') {\n          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animated: true,\n            animationBuilder: animation\n          }));\n        }\n      }\n      return promise;\n    }\n    /**\n     * Called by <ion-router> to retrieve the current component.\n     *\n     * @internal\n     */\n    async getRouteId() {\n      const active = this.getActiveSync();\n      if (active) {\n        return {\n          id: active.element.tagName,\n          params: active.params,\n          element: active.element\n        };\n      }\n      return undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    async getActive() {\n      return this.getActiveSync();\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    async getByIndex(index) {\n      return this.views[index];\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    async canGoBack(view) {\n      return this.canGoBackSync(view);\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    async getPrevious(view) {\n      return this.getPreviousSync(view);\n    }\n    /**\n     * Returns the number of views in the stack.\n     */\n    async getLength() {\n      return Promise.resolve(this.views.length);\n    }\n    getActiveSync() {\n      return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n      return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n      if (!view) {\n        return undefined;\n      }\n      const views = this.views;\n      const index = views.indexOf(view);\n      return index > 0 ? views[index - 1] : undefined;\n    }\n    /**\n     * Adds a navigation stack change to the queue and schedules it to run.\n     *\n     * @returns Whether the transition succeeds.\n     */\n    async queueTrns(ti, done) {\n      var _a, _b;\n      if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n        return false;\n      }\n      const promise = new Promise((resolve, reject) => {\n        ti.resolve = resolve;\n        ti.reject = reject;\n      });\n      ti.done = done;\n      /**\n       * If using router, check to see if navigation hooks\n       * will allow us to perform this transition. This\n       * is required in order for hooks to work with\n       * the ion-back-button or swipe to go back.\n       */\n      if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n          const canTransition = await router.canTransition();\n          if (canTransition === false) {\n            return false;\n          }\n          if (typeof canTransition === 'string') {\n            router.push(canTransition, ti.opts.direction || 'back');\n            return false;\n          }\n        }\n      }\n      // Normalize empty\n      if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n        ti.insertViews = undefined;\n      }\n      // Enqueue transition instruction\n      this.transInstr.push(ti);\n      // if there isn't a transition already happening\n      // then this will kick off this transition\n      this.nextTrns();\n      return promise;\n    }\n    success(result, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n      if (ti.done) {\n        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n      }\n      ti.resolve(result.hasCompleted);\n      if (ti.opts.updateURL !== false && this.useRouter) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n          const direction = result.direction === 'back' ? 'back' : 'forward';\n          router.navChanged(direction);\n        }\n      }\n    }\n    failed(rejectReason, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n      this.transInstr.length = 0;\n      this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n      if (ti.done) {\n        ti.done(false, false, rejectReason);\n      }\n      if (ti.reject && !this.destroyed) {\n        ti.reject(rejectReason);\n      } else {\n        ti.resolve(false);\n      }\n    }\n    /**\n     * Consumes the next transition in the queue.\n     *\n     * @returns whether the transition is executed.\n     */\n    nextTrns() {\n      // this is the framework's bread 'n butta function\n      // only one transition is allowed at any given time\n      if (this.isTransitioning) {\n        return false;\n      }\n      // there is no transition happening right now, executes the next instructions.\n      const ti = this.transInstr.shift();\n      if (!ti) {\n        return false;\n      }\n      this.runTransition(ti);\n      return true;\n    }\n    /** Executes all the transition instruction from the queue. */\n    async runTransition(ti) {\n      try {\n        // set that this nav is actively transitioning\n        this.ionNavWillChange.emit();\n        this.isTransitioning = true;\n        this.prepareTI(ti);\n        const leavingView = this.getActiveSync();\n        const enteringView = this.getEnteringView(ti, leavingView);\n        if (!leavingView && !enteringView) {\n          throw new Error('no views in the stack to be removed');\n        }\n        if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n          await enteringView.init(this.el);\n        }\n        this.postViewInit(enteringView, leavingView, ti);\n        // Needs transition?\n        const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n        if (requiresTransition && ti.opts && leavingView) {\n          const isBackDirection = ti.opts.direction === 'back';\n          /**\n           * If heading back, use the entering page's animation\n           * unless otherwise specified by the developer.\n           */\n          if (isBackDirection) {\n            ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n          }\n          leavingView.animationBuilder = ti.opts.animationBuilder;\n        }\n        let result;\n        if (requiresTransition) {\n          result = await this.transition(enteringView, leavingView, ti);\n        } else {\n          // transition is not required, so we are already done!\n          // they're inserting/removing the views somewhere in the middle or\n          // beginning, so visually nothing needs to animate/transition\n          // resolve immediately because there's no animation that's happening\n          result = {\n            hasCompleted: true,\n            requiresTransition: false\n          };\n        }\n        this.success(result, ti);\n        this.ionNavDidChange.emit();\n      } catch (rejectReason) {\n        this.failed(rejectReason, ti);\n      }\n      this.isTransitioning = false;\n      this.nextTrns();\n    }\n    prepareTI(ti) {\n      var _a, _b;\n      var _c;\n      const viewsLength = this.views.length;\n      (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n      (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n      if (ti.removeView !== undefined) {\n        assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n        assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n        const index = this.views.indexOf(ti.removeView);\n        if (index < 0) {\n          throw new Error('removeView was not found');\n        }\n        ti.removeStart += index;\n      }\n      if (ti.removeStart !== undefined) {\n        if (ti.removeStart < 0) {\n          ti.removeStart = viewsLength - 1;\n        }\n        if (ti.removeCount < 0) {\n          ti.removeCount = viewsLength - ti.removeStart;\n        }\n        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n      }\n      if (ti.insertViews) {\n        // allow -1 to be passed in to auto push it on the end\n        // and clean up the index if it's larger then the size of the stack\n        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n          ti.insertStart = viewsLength;\n        }\n        ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n      }\n      const insertViews = ti.insertViews;\n      if (!insertViews) {\n        return;\n      }\n      assert(insertViews.length > 0, 'length can not be zero');\n      const viewControllers = convertToViews(insertViews);\n      if (viewControllers.length === 0) {\n        throw new Error('invalid views to insert');\n      }\n      // Check all the inserted view are correct\n      for (const view of viewControllers) {\n        view.delegate = ti.opts.delegate;\n        const nav = view.nav;\n        if (nav && nav !== this) {\n          throw new Error('inserted view was already inserted');\n        }\n        if (view.state === VIEW_STATE_DESTROYED) {\n          throw new Error('inserted view was already destroyed');\n        }\n      }\n      ti.insertViews = viewControllers;\n    }\n    /**\n     * Returns the view that will be entered considering the transition instructions.\n     *\n     * @param ti The instructions.\n     * @param leavingView The view being left or undefined if none.\n     *\n     * @returns The view that will be entered, undefined if none.\n     */\n    getEnteringView(ti, leavingView) {\n      // The last inserted view will be entered when view are inserted.\n      const insertViews = ti.insertViews;\n      if (insertViews !== undefined) {\n        return insertViews[insertViews.length - 1];\n      }\n      // When views are deleted, we will enter the last view that is not removed and not the view being left.\n      const removeStart = ti.removeStart;\n      if (removeStart !== undefined) {\n        const views = this.views;\n        const removeEnd = removeStart + ti.removeCount;\n        for (let i = views.length - 1; i >= 0; i--) {\n          const view = views[i];\n          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n            return view;\n          }\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Adds and Removes the views from the navigation stack.\n     *\n     * @param enteringView The view being entered.\n     * @param leavingView The view being left.\n     * @param ti The instructions.\n     */\n    postViewInit(enteringView, leavingView, ti) {\n      var _a, _b, _c;\n      assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n      assert(ti.resolve, 'resolve must be valid');\n      assert(ti.reject, 'reject must be valid');\n      // Compute the views to remove.\n      const opts = ti.opts;\n      const {\n        insertViews,\n        removeStart,\n        removeCount\n      } = ti;\n      /** Records the view to destroy */\n      let destroyQueue;\n      // there are views to remove\n      if (removeStart !== undefined && removeCount !== undefined) {\n        assert(removeStart >= 0, 'removeStart can not be negative');\n        assert(removeCount >= 0, 'removeCount can not be negative');\n        destroyQueue = [];\n        for (let i = removeStart; i < removeStart + removeCount; i++) {\n          const view = this.views[i];\n          if (view !== undefined && view !== enteringView && view !== leavingView) {\n            destroyQueue.push(view);\n          }\n        }\n        // default the direction to \"back\"\n        (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n      }\n      const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n      assert(finalNumViews >= 0, 'final balance can not be negative');\n      if (finalNumViews === 0) {\n        printIonWarning(`[ion-nav] - You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n        throw new Error('navigation stack needs at least one root page');\n      }\n      // At this point the transition can not be rejected, any throw should be an error\n      // Insert the new views in the stack.\n      if (insertViews) {\n        // add the views to the\n        let insertIndex = ti.insertStart;\n        for (const view of insertViews) {\n          this.insertViewAt(view, insertIndex);\n          insertIndex++;\n        }\n        if (ti.enteringRequiresTransition) {\n          // default to forward if not already set\n          (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n        }\n      }\n      // if the views to be removed are in the beginning or middle\n      // and there is not a view that needs to visually transition out\n      // then just destroy them and don't transition anything\n      // batch all of lifecycles together\n      // let's make sure, callbacks are zoned\n      if (destroyQueue && destroyQueue.length > 0) {\n        for (const view of destroyQueue) {\n          lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n          lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n          lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n        }\n        // once all lifecycle events has been delivered, we can safely detroy the views\n        for (const view of destroyQueue) {\n          this.destroyView(view);\n        }\n      }\n    }\n    async transition(enteringView, leavingView, ti) {\n      // we should animate (duration > 0) if the pushed page is not the first one (startup)\n      // or if it is a portal (modal, actionsheet, etc.)\n      const opts = ti.opts;\n      const progressCallback = opts.progressAnimation ? ani => {\n        /**\n         * Because this progress callback is called asynchronously\n         * it is possible for the gesture to start and end before\n         * the animation is ever set. In that scenario, we should\n         * immediately call progressEnd so that the transition promise\n         * resolves and the gesture does not get locked up.\n         */\n        if (ani !== undefined && !this.gestureOrAnimationInProgress) {\n          this.gestureOrAnimationInProgress = true;\n          ani.onFinish(() => {\n            this.gestureOrAnimationInProgress = false;\n          }, {\n            oneTimeCallback: true\n          });\n          /**\n           * Playing animation to beginning\n           * with a duration of 0 prevents\n           * any flickering when the animation\n           * is later cleaned up.\n           */\n          ani.progressEnd(0, 0, 0);\n        } else {\n          this.sbAni = ani;\n        }\n      } : undefined;\n      const mode = getIonMode(this);\n      const enteringEl = enteringView.element;\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      const leavingEl = leavingView && leavingView.element;\n      const animationOpts = Object.assign(Object.assign({\n        mode,\n        showGoBack: this.canGoBackSync(enteringView),\n        baseEl: this.el,\n        progressCallback,\n        animated: this.animated && config.getBoolean('animated', true),\n        enteringEl,\n        leavingEl\n      }, opts), {\n        animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n      });\n      const {\n        hasCompleted\n      } = await transition(animationOpts);\n      return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n      /**\n       * If the transition did not complete, the leavingView will still be the active\n       * view on the stack. Otherwise unmount all the views after the enteringView.\n       */\n      const activeView = hasCompleted ? enteringView : leavingView;\n      if (activeView) {\n        this.unmountInactiveViews(activeView);\n      }\n      return {\n        hasCompleted,\n        requiresTransition: true,\n        enteringView,\n        leavingView,\n        direction: opts.direction\n      };\n    }\n    /**\n     * Inserts a view at the specified index.\n     *\n     * When the view already is in the stack it will be moved to the new position.\n     *\n     * @param view The view to insert.\n     * @param index The index where to insert the view.\n     */\n    insertViewAt(view, index) {\n      const views = this.views;\n      const existingIndex = views.indexOf(view);\n      if (existingIndex > -1) {\n        assert(view.nav === this, 'view is not part of the nav');\n        // The view already in the stack, removes it.\n        views.splice(existingIndex, 1);\n        // and add it back at the requested index.\n        views.splice(index, 0, view);\n      } else {\n        assert(!view.nav, 'nav is used');\n        // this is a new view to add to the stack\n        // create the new entering view\n        view.nav = this;\n        views.splice(index, 0, view);\n      }\n    }\n    /**\n     * Removes a view from the stack.\n     *\n     * @param view The view to remove.\n     */\n    removeView(view) {\n      assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n      const views = this.views;\n      const index = views.indexOf(view);\n      assert(index > -1, 'view must be part of the stack');\n      if (index >= 0) {\n        views.splice(index, 1);\n      }\n    }\n    destroyView(view) {\n      view._destroy();\n      this.removeView(view);\n    }\n    /**\n     * Unmounts all inactive views after the specified active view.\n     *\n     * DOM WRITE\n     *\n     * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n     */\n    unmountInactiveViews(activeView) {\n      // ok, cleanup time!! Destroy all of the views that are\n      // INACTIVE and come after the active view\n      // only do this if the views exist, though\n      if (this.destroyed) {\n        return;\n      }\n      const views = this.views;\n      const activeViewIndex = views.indexOf(activeView);\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        /**\n         * When inserting multiple views via insertPages\n         * the last page will be transitioned to, but the\n         * others will not be. As a result, a DOM element\n         * will only be created for the last page inserted.\n         * As a result, it is possible to have views in the\n         * stack that do not have `view.element` yet.\n         */\n        const element = view.element;\n        if (element) {\n          if (i > activeViewIndex) {\n            // this view comes after the active view\n            // let's unload it\n            lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n            this.destroyView(view);\n          } else if (i < activeViewIndex) {\n            // this view comes before the active view\n            // and it is not a portal then ensure it is hidden\n            setPageHidden(element, true);\n          }\n        }\n      }\n    }\n    canStart() {\n      return !this.gestureOrAnimationInProgress && !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.canGoBackSync();\n    }\n    onStart() {\n      this.gestureOrAnimationInProgress = true;\n      this.pop({\n        direction: 'back',\n        progressAnimation: true\n      });\n    }\n    onMove(stepValue) {\n      if (this.sbAni) {\n        this.sbAni.progressStep(stepValue);\n      }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n      if (this.sbAni) {\n        this.sbAni.onFinish(() => {\n          this.gestureOrAnimationInProgress = false;\n        }, {\n          oneTimeCallback: true\n        });\n        // Account for rounding errors in JS\n        let newStepValue = shouldComplete ? -1e-3 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n        if (!shouldComplete) {\n          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n        } else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n        }\n        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      } else {\n        this.gestureOrAnimationInProgress = false;\n      }\n    }\n    render() {\n      return h(\"slot\", {\n        key: '8067c9835d255daec61f33dba200fd3a6ff839a0'\n      });\n    }\n    get el() {\n      return getElement(this);\n    }\n    static get watchers() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    }\n  };\n  Nav.style = navCss;\n  return Nav;\n})();\nconst navLink = (el, routerDirection, component, componentProps, routerAnimation) => {\n  const nav = el.closest('ion-nav');\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n  return Promise.resolve(false);\n};\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);\n    };\n  }\n  render() {\n    return h(Host, {\n      key: '6dbb1ad4f351e9215375aac11ab9b53762e07a08',\n      onClick: this.onClick\n    });\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nexport { Nav as ion_nav, NavLink as ion_nav_link };"],"mappings":"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","names":["VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","container","__async","attachComponent","assert","element","matches","view","id","shallowEqualStringMap","convertToView","page","convertToViews","pages","v","navCss","Nav","hostRef","registerInstance","createEvent","mode","getIonMode","config","lifecycle","LIFECYCLE_WILL_UNLOAD","componentProps","opts","done","insertIndex","insertComponents","indexOrViewCtrl","ti","startIndex","removeCount","views","direction","animation","active","resolve","promise","r","finish","commonOpts","enteringEl","mark","viewController","index","_a","_b","reject","router","canTransition","result","rejectReason","leavingView","enteringView","requiresTransition","_c","viewsLength","insertViews","viewControllers","nav","removeStart","removeEnd","i","destroyQueue","finalNumViews","printIonWarning","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","progressCallback","ani","leavingEl","animationOpts","hasCompleted","transition","activeView","existingIndex","activeViewIndex","setPageHidden","stepValue","shouldComplete","dur","newStepValue","getTimeGivenProgression","h","getElement","navLink","el","routerDirection","routerAnimation","NavLink","Host"],"x_google_ignoreList":[0]}