{
  "version": 3,
  "sources": ["src/app/providers/user.service.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\r\nimport { Storage } from '@ionic/storage-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  storage = inject(Storage);\r\n\r\n  favorites: string[] = [];\r\n  HAS_LOGGED_IN = 'hasLoggedIn';\r\n  HAS_SEEN_TUTORIAL = 'hasSeenTutorial';\r\n\r\n  hasFavorite(sessionName: string): boolean {\r\n    return this.favorites.indexOf(sessionName) > -1;\r\n  }\r\n\r\n  addFavorite(sessionName: string): void {\r\n    this.favorites.push(sessionName);\r\n  }\r\n\r\n  removeFavorite(sessionName: string): void {\r\n    const index = this.favorites.indexOf(sessionName);\r\n    if (index > -1) {\r\n      this.favorites.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  login(username: string): Promise<boolean> {\r\n    return this.storage.set(this.HAS_LOGGED_IN, true).then(() => {\r\n      this.setUsername(username);\r\n      return window.dispatchEvent(new CustomEvent('user:login'));\r\n    });\r\n  }\r\n\r\n  signup(username: string): Promise<boolean> {\r\n    return this.storage.set(this.HAS_LOGGED_IN, true).then(() => {\r\n      this.setUsername(username);\r\n      return window.dispatchEvent(new CustomEvent('user:signup'));\r\n    });\r\n  }\r\n\r\n  logout(): Promise<any> {\r\n    return this.storage\r\n      .remove(this.HAS_LOGGED_IN)\r\n      .then(() => {\r\n        return this.storage.remove('username');\r\n      })\r\n      .then(() => {\r\n        window.dispatchEvent(new CustomEvent('user:logout'));\r\n      });\r\n  }\r\n\r\n  setUsername(username: string): Promise<any> {\r\n    return this.storage.set('username', username);\r\n  }\r\n\r\n  getUsername(): Promise<string> {\r\n    return this.storage.get('username').then(value => {\r\n      return value;\r\n    });\r\n  }\r\n\r\n  isLoggedIn(): Promise<boolean> {\r\n    return this.storage.get(this.HAS_LOGGED_IN).then(value => {\r\n      return value === true;\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "uFAMA,IAAaA,GAAW,IAAA,CAAlB,IAAOA,EAAP,MAAOA,CAAW,CAHxBC,aAAA,CAIE,KAAAC,QAAUC,EAAOC,CAAO,EAExB,KAAAC,UAAsB,CAAA,EACtB,KAAAC,cAAgB,cAChB,KAAAC,kBAAoB,kBAEpBC,YAAYC,EAAmB,CAC7B,OAAO,KAAKJ,UAAUK,QAAQD,CAAW,EAAI,EAC/C,CAEAE,YAAYF,EAAmB,CAC7B,KAAKJ,UAAUO,KAAKH,CAAW,CACjC,CAEAI,eAAeJ,EAAmB,CAChC,IAAMK,EAAQ,KAAKT,UAAUK,QAAQD,CAAW,EAC5CK,EAAQ,IACV,KAAKT,UAAUU,OAAOD,EAAO,CAAC,CAElC,CAEAE,MAAMC,EAAgB,CACpB,OAAO,KAAKf,QAAQgB,IAAI,KAAKZ,cAAe,EAAI,EAAEa,KAAK,KACrD,KAAKC,YAAYH,CAAQ,EAClBI,OAAOC,cAAc,IAAIC,YAAY,YAAY,CAAC,EAC1D,CACH,CAEAC,OAAOP,EAAgB,CACrB,OAAO,KAAKf,QAAQgB,IAAI,KAAKZ,cAAe,EAAI,EAAEa,KAAK,KACrD,KAAKC,YAAYH,CAAQ,EAClBI,OAAOC,cAAc,IAAIC,YAAY,aAAa,CAAC,EAC3D,CACH,CAEAE,QAAM,CACJ,OAAO,KAAKvB,QACTwB,OAAO,KAAKpB,aAAa,EACzBa,KAAK,IACG,KAAKjB,QAAQwB,OAAO,UAAU,CACtC,EACAP,KAAK,IAAK,CACTE,OAAOC,cAAc,IAAIC,YAAY,aAAa,CAAC,CACrD,CAAC,CACL,CAEAH,YAAYH,EAAgB,CAC1B,OAAO,KAAKf,QAAQgB,IAAI,WAAYD,CAAQ,CAC9C,CAEAU,aAAW,CACT,OAAO,KAAKzB,QAAQ0B,IAAI,UAAU,EAAET,KAAKU,GAChCA,CACR,CACH,CAEAC,YAAU,CACR,OAAO,KAAK5B,QAAQ0B,IAAI,KAAKtB,aAAa,EAAEa,KAAKU,GACxCA,IAAU,EAClB,CACH,yCA7DW7B,EAAW,wBAAXA,EAAW+B,QAAX/B,EAAWgC,UAAAC,WAFV,MAAM,CAAA,EAEd,IAAOjC,EAAPkC,SAAOlC,CAAW,GAAA",
  "names": ["UserService", "constructor", "storage", "inject", "Storage", "favorites", "HAS_LOGGED_IN", "HAS_SEEN_TUTORIAL", "hasFavorite", "sessionName", "indexOf", "addFavorite", "push", "removeFavorite", "index", "splice", "login", "username", "set", "then", "setUsername", "window", "dispatchEvent", "CustomEvent", "signup", "logout", "remove", "getUsername", "get", "value", "isLoggedIn", "factory", "\u0275fac", "providedIn", "_UserService"]
}
