{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, c as createEvent, j as printIonError, f as printIonWarning, g as getElement, h, d as Host } from './index-4DxY6_gG.js';\nimport { c as componentOnReady, p as debounce } from './helpers-8KSQQGQy.js';\nimport { o as openURL, c as createColorClasses } from './theme-DiVJyqlX.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() {\n    return {\n      \"url\": [\"onUpdate\"],\n      \"component\": [\"onUpdate\"],\n      \"componentProps\": [\"onComponentProps\"]\n    };\n  }\n};\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() {\n    return {\n      \"from\": [\"propDidChange\"],\n      \"to\": [\"propDidChange\"]\n    };\n  }\n};\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = segments => {\n  const path = segments.filter(s => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  } else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = chain => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      } else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = path => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path.split('/').map(s => s.trim()).filter(s => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return {\n    segments,\n    queryString\n  };\n};\nconst printRoutes = routes => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach(r => segments.push(...r.segments));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = redirects => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  } catch (e) {\n    printIonError('[ion-router] - Exception in writeNavState:', e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async root => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while (outlet = searchNavNode(node)) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    } else {\n      break;\n    }\n  }\n  return {\n    ids,\n    outlet\n  };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), {\n      once: true\n    });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = root => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n  const {\n    from,\n    to\n  } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find(redirect => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    } else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        } else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return {\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params)\n      };\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = chain => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      } else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = root => {\n  return Array.from(root.children).filter(el => el.tagName === 'ION-ROUTE-REDIRECT').map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to)\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = root => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = node => {\n  return Array.from(node.children).filter(el => el.tagName === 'ION-ROUTE' && el.component).map(el => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = nodes => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [...chain, {\n    id: node.id,\n    segments: node.segments,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  }];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const {\n          redirect\n        } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    } else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      } else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   * @param animation A custom animation to use for the transition.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      } else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      printIonWarning('[ion-router] - Router is busy, navChanged was cancelled.');\n      return false;\n    }\n    const {\n      ids,\n      outlet\n    } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      printIonWarning('[ion-router] - No matching URL for', ids.map(i => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      printIonWarning('[ion-router] - Router could not match path because some required param is missing.');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || state >= lastState && lastState > 0) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      printIonError('[ion-router] - URL is not part of the routing set.');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const {\n        segments: toSegments,\n        queryString\n      } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      printIonError('[ion-router] - The path does not match any route.');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    } catch (e) {\n      printIonError('[ion-router] - Exception in safeWriteNavState:', e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      printIonWarning('[ion-router] - Router is busy, transition was cancelled.');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to\n    };\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #0054e9);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\nconst RouterLink = /*#__PURE__*/(() => {\n  let RouterLink = class {\n    constructor(hostRef) {\n      registerInstance(this, hostRef);\n      /**\n       * When using a router, it specifies the transition direction when navigating to\n       * another page using `href`.\n       */\n      this.routerDirection = 'forward';\n      this.onClick = ev => {\n        openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n      };\n    }\n    render() {\n      const mode = getIonMode(this);\n      const attrs = {\n        href: this.href,\n        rel: this.rel,\n        target: this.target\n      };\n      return h(Host, {\n        key: 'd7f2affcde45c5fbb6cb46cd1c30008ee92a68c5',\n        onClick: this.onClick,\n        class: createColorClasses(this.color, {\n          [mode]: true,\n          'ion-activatable': true\n        })\n      }, h(\"a\", Object.assign({\n        key: 'babafae85ca5c6429958d383feff0493ff8cf33e'\n      }, attrs), h(\"slot\", {\n        key: '50314e9555bbf6dffa0c50c3f763009dee59b10b'\n      })));\n    }\n  };\n  RouterLink.style = routerLinkCss;\n  return RouterLink;\n})();\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };"],"mappings":"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","names":["Route","hostRef","registerInstance","createEvent","newValue","oldValue","keys1","keys2","key","RouteRedirect","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","s","generateUrl","useHash","queryString","url","writeSegments","history","root","direction","state","parsePath","chainToSegments","chain","route","segment","param","removePrefix","prefix","i","readSegments","loc","pathname","path","qsStart","printRoutes","routes","ids","printRedirects","redirects","redirect","writeNavState","index","changed","animation","__async","outlet","searchNavNode","resolve","componentOnReady","result","e","printIonError","readNavState","node","id","waitUntilNavNode","OUTLET_SELECTOR","matchesRedirect","from","to","expected","findRouteRedirect","matchesIDs","len","score","routeId","routeChain","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","matchesDefault","allparams","chainSegments","data","params","mergeParams","a","b","findChainForIDs","chains","match","maxMatches","_a","findChainForSegments","bestScore","matchedChain","computePriority","level","readProp","el","prop","readRedirects","readRoutes","flattenRouterTree","readRouteNodes","component","nodes","flattenNode","child","Router","canProceed","debounce","ev","processNextHandler","currentPath","parsedPath","printIonWarning","win","lastState","redirectFrom","toSegments","unlock","p","r","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","redirectFromSegments","redirectedFrom","getElement","routerLinkCss","RouterLink","openURL","mode","getIonMode","attrs","h","Host","createColorClasses"],"x_google_ignoreList":[0]}