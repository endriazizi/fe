{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-picker-column-option.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, d as Host, g as getElement } from './index-4DxY6_gG.js';\nimport { b as inheritAttributes } from './helpers-8KSQQGQy.js';\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\nimport { b as getIonMode } from './ionic-global-CTSyufhF.js';\nconst pickerColumnOptionIosCss = \".picker-column-option-button{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden}:host(.option-disabled){opacity:0.4}:host(.option-disabled) .picker-column-option-button{cursor:default}\";\nconst pickerColumnOptionMdCss = \".picker-column-option-button{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden}:host(.option-disabled){opacity:0.4}:host(.option-disabled) .picker-column-option-button{cursor:default}:host(.option-active){color:var(--ion-color-base)}\";\nconst PickerColumnOption = /*#__PURE__*/(() => {\n  let PickerColumnOption = class {\n    constructor(hostRef) {\n      registerInstance(this, hostRef);\n      /**\n       * We keep track of the parent picker column\n       * so we can update the value of it when\n       * clicking an enable option.\n       */\n      this.pickerColumn = null;\n      /**\n       * The aria-label of the option.\n       *\n       * If the value changes, then it will trigger a\n       * re-render of the picker since it's a @State variable.\n       * Otherwise, the `aria-label` attribute cannot be updated\n       * after the component is loaded.\n       */\n      this.ariaLabel = null;\n      /**\n       * If `true`, the user cannot interact with the picker column option.\n       */\n      this.disabled = false;\n      /**\n       * The color to use from your application's color palette.\n       * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n       * For more information on colors, see [theming](/docs/theming/basics).\n       */\n      this.color = 'primary';\n    }\n    /**\n     * The aria-label of the option has changed after the\n     * first render and needs to be updated within the component.\n     *\n     * @param ariaLbl The new aria-label value.\n     */\n    onAriaLabelChange(ariaLbl) {\n      this.ariaLabel = ariaLbl;\n    }\n    componentWillLoad() {\n      const inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n      /**\n       * The initial value of `aria-label` needs to be set for\n       * the first render.\n            */\n      this.ariaLabel = inheritedAttributes['aria-label'] || null;\n    }\n    connectedCallback() {\n      this.pickerColumn = this.el.closest('ion-picker-column');\n    }\n    disconnectedCallback() {\n      this.pickerColumn = null;\n    }\n    /**\n     * The column options can load at any time\n     * so the options needs to tell the\n     * parent picker column when it is loaded\n     * so the picker column can ensure it is\n     * centered in the view.\n     *\n     * We intentionally run this for every\n     * option. If we only ran this from\n     * the selected option then if the newly\n     * loaded options were not selected then\n     * scrollActiveItemIntoView would not be called.\n     */\n    componentDidLoad() {\n      const {\n        pickerColumn\n      } = this;\n      if (pickerColumn !== null) {\n        pickerColumn.scrollActiveItemIntoView();\n      }\n    }\n    /**\n     * When an option is clicked, update the\n     * parent picker column value. This\n     * component will handle centering the option\n     * in the column view.\n     */\n    onClick() {\n      const {\n        pickerColumn\n      } = this;\n      if (pickerColumn !== null) {\n        pickerColumn.setValue(this.value);\n      }\n    }\n    render() {\n      const {\n        color,\n        disabled,\n        ariaLabel\n      } = this;\n      const mode = getIonMode(this);\n      return h(Host, {\n        key: 'f816729941aabcb31ddfdce3ffe2e2139030d715',\n        class: createColorClasses(color, {\n          [mode]: true,\n          ['option-disabled']: disabled\n        })\n      }, h(\"div\", {\n        key: 'd942de84fd14d7dc06b1e5cf4f7920d1dc3c6371',\n        class: 'picker-column-option-button',\n        role: \"button\",\n        \"aria-label\": ariaLabel,\n        onClick: () => this.onClick()\n      }, h(\"slot\", {\n        key: 'b0df5717b42209e649097209a01476e1a66f5c5c'\n      })));\n    }\n    get el() {\n      return getElement(this);\n    }\n    static get watchers() {\n      return {\n        \"aria-label\": [\"onAriaLabelChange\"]\n      };\n    }\n  };\n  PickerColumnOption.style = {\n    ios: pickerColumnOptionIosCss,\n    md: pickerColumnOptionMdCss\n  };\n  return PickerColumnOption;\n})();\nexport { PickerColumnOption as ion_picker_column_option };"],"mappings":"iNAOA,IAAMA,EAA2B,+fAC3BC,EAA0B,ijBAC1BC,GAAmC,IAAM,CAC7C,IAAIA,EAAqB,KAAM,CAC7B,YAAYC,EAAS,CACnBC,EAAiB,KAAMD,CAAO,EAM9B,KAAK,aAAe,KASpB,KAAK,UAAY,KAIjB,KAAK,SAAW,GAMhB,KAAK,MAAQ,SACf,CAOA,kBAAkBE,EAAS,CACzB,KAAK,UAAYA,CACnB,CACA,mBAAoB,CAClB,IAAMC,EAAsBC,EAAkB,KAAK,GAAI,CAAC,YAAY,CAAC,EAKrE,KAAK,UAAYD,EAAoB,YAAY,GAAK,IACxD,CACA,mBAAoB,CAClB,KAAK,aAAe,KAAK,GAAG,QAAQ,mBAAmB,CACzD,CACA,sBAAuB,CACrB,KAAK,aAAe,IACtB,CAcA,kBAAmB,CACjB,GAAM,CACJ,aAAAE,CACF,EAAI,KACAA,IAAiB,MACnBA,EAAa,yBAAyB,CAE1C,CAOA,SAAU,CACR,GAAM,CACJ,aAAAA,CACF,EAAI,KACAA,IAAiB,MACnBA,EAAa,SAAS,KAAK,KAAK,CAEpC,CACA,QAAS,CACP,GAAM,CACJ,MAAAC,EACA,SAAAC,EACA,UAAAC,CACF,EAAI,KACEC,EAAOC,EAAW,IAAI,EAC5B,OAAOC,EAAEC,EAAM,CACb,IAAK,2CACL,MAAOC,EAAmBP,EAAO,CAC/B,CAACG,CAAI,EAAG,GACP,kBAAoBF,CACvB,CAAC,CACH,EAAGI,EAAE,MAAO,CACV,IAAK,2CACL,MAAO,8BACP,KAAM,SACN,aAAcH,EACd,QAAS,IAAM,KAAK,QAAQ,CAC9B,EAAGG,EAAE,OAAQ,CACX,IAAK,0CACP,CAAC,CAAC,CAAC,CACL,CACA,IAAI,IAAK,CACP,OAAOG,EAAW,IAAI,CACxB,CACA,WAAW,UAAW,CACpB,MAAO,CACL,aAAc,CAAC,mBAAmB,CACpC,CACF,CACF,EACA,OAAAf,EAAmB,MAAQ,CACzB,IAAKF,EACL,GAAIC,CACN,EACOC,CACT,GAAG","names":["pickerColumnOptionIosCss","pickerColumnOptionMdCss","PickerColumnOption","hostRef","registerInstance","ariaLbl","inheritedAttributes","inheritAttributes","pickerColumn","color","disabled","ariaLabel","mode","getIonMode","h","Host","createColorClasses","getElement"],"x_google_ignoreList":[0]}